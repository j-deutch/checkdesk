Checkdesk Automated Tests
-------------------------

Checkdesk has behavioral tests and unit tests. This documentation covers both.

# Behavioral Tests

Automated behavioral testing on Checkdesk relies on Behat, Mink, Selenium and Drupal Extension. 
This documentation assumes that you are familiar with Behat, Selenium, Mink, Cucumber, automated testing and 
Behavior-Driven Development. If not, check the references on section 5 of this document, and you'll be.

1. Preparing your environment and running tests

  1.1  This project uses Composer to manage Behat and its dependencies. Go to test/behat, run
       `php composer.phar install` or `php composer.phar update` in order to install or update the dependencies.
       This command will create test/behat/bin/ and test/behat/vendor/ directories. If you don't have Composer,
       install it: `curl -sS https://getcomposer.org/installer | php`.
  1.2  In order to run the tests that use JavaScript, you must have a browser. By default, this browser is Firefox,
       but you can change it by editing behat.yml. You don't need to have a real X server, you can use xvfb, for example.
       On apt-based Linux distributions, such as Ubuntu and Debian, you can install it by running:
       `apt-get install xvfb`.
       You'll need to run a standalone Selenium server. Get the latest Selenium standalone server (.jar) 
       at http://code.google.com/p/selenium/downloads/list. After that, you can start the server by running: 
       `java -jar selenium-server-standalone-2.39.0.jar`, where selenium-server-standalone-2.39.0.jar is the file you
       downloaded. If you want to use xvfb, you can run the server this way: 
       `DISPLAY=:1 xvfb-run java -jar selenium-server-standalone-2.39.0.jar`
  1.3  Once Selenium is running, you can execute the test suite. Do it by running: `php bin/behat` from test/behat.
       You don't need to have any testing data, they will be created and removed automatically.
  1.4  If you are going to run tests from the command line, you will need to configure the base URL. You can do it by
       editing test/behat/behat.yml (check for a commented line) or by exporting an environment variable:
       `export MINK_EXTENSION_PARAMS='base_url=http://localhost'`
  1.5  Alternatively, you can run the tests from the Drupal administrative UI by enabling the module behat_ui
       and visiting admin/config/development/behat_ui. You don't need to configure a base URL on this case.
  1.6  You can run the tests using PhantomJS instead of Selenium. In order to do that, just run PhantomJS on port
       8643, this way: `phantomjs --webdriver=8643 --cookies-file=/tmp/cookies.txt`. In that case, you should put
       the path `http://localhost:8643/wd/hub` as the `wd_host` in `behat.yml`. It didn't work with PhantomJS 2.0,
       but it does work with PhantomJS 1.9.8.
  1.7  You can also run the tests using Drush: `drush --uri=<base_url> behat-ui` or `drush --uri=<base_url> bui`

2. Adding new tests

  You can add new tests by adding scenarios to existing features, or by adding new features. Check existing features
  before creating new ones. These files must be located in test/behat/features/ directory. 
  Probably all scenarios need to be tagged with @api, because they need Drupal. Scenarios that require JavaScript must 
  be tagged with @javascript. On some cases you may want to wait for some time before asserting something, so the step
  `And I wait for X seconds` is useful. You may also want to remove test data that is not automatically removed by
  calling the step `And I remove the created nodes`. 
  You can check existing implemented steps by running `php bin/behat -dl`.
  If the steps you need are not implemented, you can implement them or install Behat extensions that implement them. 
  Check the two following sections to know how to do both.

3. Adding new Behat extensions

  Behat extensions implement new steps. You can add new extensions by editing file test/behat/composer.json
  and by running: `php composer.phar update`. If you don't have Composer, install it:
  `curl -sS https://getcomposer.org/installer | php`. Composer will download and install files under test/behat/vendor/.
  You may need to edit files test/behat/behat.yml and test/behat/features/bootstrap/FeatureContext.php
  in order to configure and/or use the new extensions.

4. Adding new steps

  New steps can be implemented as new methods on file test/behat/features/bootstrap/FeatureContext.php. 
  Check existing methods as reference.

5. References

  * https://drupal.org/project/behat
  * https://portland2013.drupal.org/session/behat-behavioral-driven-development-and-selenium-drupal
  * http://jmolivas.com/slides/dcla2013/behavior-driven-development-behat-mink-selenium/#/1
  * http://www.dspeak.com/drupalextension/drupalapi.html
  * http://mink.behat.org/api/behat/mink/session.html
  * https://gist.github.com/jhedstrom

# Unit Tests

Unit tests rely on Simpletests, as Drupal.

1. Preparing your environment and running tests

First, you need to setup a testing database. Check `config/settings.local.php.example` for an example. It should be the "test" key of
the `$databases` array. It is supposed to be a valid, up-to-date Checkdesk database installed using Checkdesk profile and with the
required modules enabled.

Then you can run the Checkdesk test suite by calling the Bash script from the Drupal root: `CHECKDESK_HOST=http://meedan-checkdesk/ ./scripts/run-checkdesk-tests.sh`. If you don't want to define the CHECKDESK_HOST everytime, just `export` it in your shell.

This command should run all Checkdesk tests and output the results. Ideally, "fails" and "exceptions" should be 0.

If you need to debug or see exactly where the tests fail, pass `--verbose` to the script.

2. Adding new tests

A test file should be in the `tests` directory inside the module that is being tested, with a `.test` extension. Run `find drupal/sites/all/modules/custom -name "*.test"` to see the existing test files.

The test class should inherit from `CheckdeskTestCase`. If you need to change something that should apply to all tests, edit the abstract
test class directly, in `checkdesk_core` module.

Please add the test to the "Checkdesk" group in the `getInfo()` method, this way it will be called when `run-checkdesk-tests.sh` runs. 

If you need special behavior in the `setUp` or `tearDown` methods, please remember to call `parent::setUp()` in the beginning of your implementation of them.

If you need to authenticate as a user, call the `$this->authenticate()` method passing as parameter an array of permissions that this user should have.
