// ===================================================================
// Form drag and drop
// On create update page
//
@mixin form-drag-and-drop() {
  .views-row.ui-draggable-dragging .views-row, 
  .views-row.ui-draggable:hover .views-row {
    background-color: $postit-yellow;
    cursor: move;
    @include cd-box-shadow;
    // z-index: 1000000;
    // position: relative;
  }

  // The drop indicator
  .ui-droppable { 
    float: $from-direction; // it must be floated to contain droppable form elements.
    width: 100%; // ... thus this must be set since it must be floated. 
    padding: 0; //  ... thus we can have no padding
  }

  .ui-droppable.drop-hover textarea {
    background-color: rgba($twitter-blueish, 0.02);
    border-color: rgba($twitter-blueish, 0.9);
  }
}

// ===================================================================
// Form actions
//

@mixin form-actions {
  div.form-actions {
    @include ctb-clearfix;
    margin: $absolute-line-height 0;
    border-top: 1px solid $firefly10;
    padding-top: $absolute-line-height;
    input, a {
      @include checkdesk-button(rgba($firefly, 0.4));
      &:hover {
        @include checkdesk-button(rgba($firefly, 0.6));
      }
    }
  }

  // De-emphasized buttons
  // input#edit-reset, 
  // input#edit-draft, 
  // input[type="reset"] {
  //   @include checkdesk-button(rgba($firefly, 0.05));
  //   color: $firefly40;
  // }

  // Buttons
  input#edit-submit, 
  .form-submit {
    @include checkdesk-button();
  }

  // Disabled buttons
  input:disabled {
    @include disable-button();
  }

}

// ===================================================================
// Inline form errors
//
@mixin form-inline-errors {
  @include cd-sans-serif-family;
  // hide labels for forms with ife
  &.ife {
    label {
      // display: none;
    }
    .form-type-checkbox, .form-type-radio {
      label {
        // display: inline-block;
      }
    }
    // unless it is a select field
    .form-type-select {
      @include ctb-clearfix;
      label {
        // display: inline-block;
        // float: $alpha;
        margin-#{$omega}: $gutter-width;
        line-height: $absolute-line-height;
        padding-top: $absolute-line-height/3;
      }
      select {
        // float: $alpha;
        // @include span-columns($container-width/2);
        padding: 0;
      }
    }
  }
  // Show labels on login form
  &#user-login label {
    display: block;
  }
  // Registration form
  &#user-register-form {
    padding-#{$omega}: 0;
    padding-#{$alpha}: 0;

    label {
      display: block;
      clear: both;

      span {
        color: $firefly30;
        font-size: $small-font-size;
      }
    }
    input[type=text], input[type=password] {
      margin-top: 0;

      &.success {
        border-color: $successText;
      }
    }
    .form-item {
      position: relative;
      clear: both;
    }
    label.danger, label.error, label.success {
      position: absolute;
      #{$from-direction}: 80%;
      padding-#{$from-direction}: $gutter-width;
      line-height: $absolute-line-height * 1.5;
      width: 30%;
      background: transparent;
    }
    label.danger, label.error {
      color: $errorText;
    }
    label.success {
      color: $successText;
    }
    .recaptcha_input_area label {
      top: $absolute-line-height * 1.5;
      text-align: $from-direction;
    }
    div.password-confirm {
      display: none;
    }
    .recaptchatable {
      width: 80% !important;
    }
    .recaptcha_input_area {
      position: static !important;
    }
  }
  .messages-inline {
    background: none;
    border: 0 none;
    display: inline-block;
    margin: 0;
    padding: 0;
    padding-bottom: $absolute-line-height/2;
    font-size: $small-font-size;
    line-height: 1.4;
  }

}
  
// do not hide labels for report edit form
.page-node-edit form.node-media-form {
  label {
    display: inline-block; 
  }
  input[type="text"],
  textarea {
    margin-top: 0;
  }
}

// In addition to our use of normalize, and other resets, 
// This standardizes form elements
// #review why so many resets? CGB
//
@mixin form-standardize {
  
  label, input, button, select, textarea, body.cke_editable { font-size: $small-font-size; }

  // Everything else
  textarea, body.cke_editable, input[type="text"], input[type="password"], input[type="datetime"], input[type="datetime-local"], input[type="date"], input[type="month"], input[type="time"], input[type="week"], input[type="number"], input[type="email"], input[type="url"], input[type="search"], input[type="tel"], input[type="color"], input[type="text"], .uneditable-input {
    background-color: $input-background;
    border: 1px solid $inputBorder;
    @include box-shadow(rgba($firefly, .075) 0 1px 1px inset);
    @include ctb-transition(#{border linear .2s, box-shadow linear .2s});

    // Focus state
    &:focus {
      border-color: rgba($facebook-blue,.8);
      outline: 0;
      outline: thin dotted \9; /* IE6-9 */
      // @include ctb-box-shadow(#{inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(82,168,236,.6)});
    }
  }

  // // Position radios and checkboxes better
  // input[type="radio"], input[type="checkbox"] {
  //   margin: ms(-2) 0 0;
  //   *margin-top: 0; /* IE7 */
  //   margin-top: 1px \9; /* IE8-9 */
  //   line-height: normal;
  //   cursor: pointer;
  //   & + label {
  //     margin: ms(-2) 0 0;
  //   }
  // }

  // // Reset width of input images, buttons, radios, checkboxes
  // input[type="file"], input[type="image"], input[type="submit"], input[type="reset"], input[type="button"], input[type="radio"], input[type="checkbox"] {
  //   width: auto; // Override of generic input selector
  // }

  // Make select elements obey height by applying a border
  select {
    width: 220px; // default input width + 10px of padding that doesn't get applied
    border: 1px solid $inputBorder;
    background-color: $input-background; // Chrome on Linux and Mobile Safari need background-color
    // font-size: $small-font-size;
  }

  // Make multiple select elements height not fixed
  select[multiple], select[size] { height: auto; }

  // Focus for select, file, radio, and checkbox
  select:focus, input[type="file"]:focus, input[type="radio"]:focus, input[type="checkbox"]:focus {
    @include ctb-tab-focus();
  }
}

@mixin cd-form-styles-except-layout {
  form {

    input[type="password"],
    input[type="text"], 
    // input[type="file"], 
    textarea {
      @include cd-sans-serif-family;
      @include border-radius(3px);
      display: block;
      line-height: $base-line-height;
      background-color: $input-background;
      border: 1px solid $grey;
      // margin-top: $gutter-width;

      // focus state
      &:focus {
        border-color: rgba(black, .5);
        outline: thin dotted $firefly30;
      }
    }

    textarea { 
      height: 250px; 
    } // starting height

    // set textarea height under 
    .cke_contents { 
      max-height: 250px !important;
    }

    // checkboxes and radios
    input[type="checkbox"], 
    input[type="radio"] {
      width: $checkbox-width;
      display: inline-block;
      clear: both;
      float: $from-direction;
    } 

    // When we start writing make it bright
    input:focus, 
    textarea:focus,
    body.cke_editable:focus { 
      background-color: white; 
    }

    // Default labels
    label {
      font-size: $small-font-size;
      font-weight: normal;
      padding { top: $gutter-width; bottom: 0; }
      color: $firefly80;
      &[for="edit-pass"] {
        a  {
          padding: $gutter-width;
          font-size: $small-font-size;
          color: $grey;
          font-weight: normal;
        }
      }
    }

    // // Default descriptions
    .description {
      font-size: $small-font-size !important;
      color: $firefly30 !important;
      width: 100%;
    }

    .nodescription .description {
      display: none;
    }

    // little links: create new account, forgot password 
    // wow BAD selector here haha - CGB
    // .item-list .first.last {
    //   font-size: $small-font-size;
    // }

    // Confirmation Form Actions: Confirm delete node
    &.confirmation {
      .form-actions input {
          @include checkdesk-button($firetruck-red); // Red delete button
      }
    }

    // // Checkbox labels for checkboxes and radios, aka ".options"
    // label.option {
    //   @include reset-box-model; // reset default label styles
    //   display: inline-block;
    //   font-size: $smaller-font-size;
    //   cursor: pointer;
    //   float: $from-direction;
    //   clear: none;
    // }

    @include form-actions;
    @include form-drag-and-drop;
    @include form-inline-errors;

    // & > .form-item {
    //   clear: both;
    //   font-size: $small-font-size;
    //   color: $firefly60;
    //   background: rgba($firefly30, 0.5);
    // }
  }
}

// ============================================================================
// The reusable form layout mixin 
// ONLY LAYOUT in this section
// It is reused many times at various breakpoints
//
@mixin cd-form-layout($w, $context, $gutter-width: $gutter-width) {
  form {
    // @include form-pass-layout($w, $context);
    // @include span-columns($w, $context, $gutter-width);
    @content; // if you want to pass in padding via breakpoints

    // Form actions
    // .form-actions { @include span-columns($w, $w); }

    & > .form-item {
      @include span-columns($w, $w);

      // Nested <.form-item>s
      .form-item { 
        @include span-columns($w, $w);
      }
    } 

    // Default main inputs and textareas
    input[type="password"],
    input[type="text"],
    // input[type="file"],
    textarea {
      @include cd-sans-serif-family;
      @include span-columns($w, $w); // small padding with grid accounting
      @include ctb-box-sizing(border-box); // Makes inputs behave like true block-level elements
      padding: { top: $gutter-width/2; bottom: $gutter-width/2; } // match the padding on top and bottom
      height: auto;
    }

    // image field
    .image-widget {
      @include border-radius(3px);
      display: block;
      // background-color: rgba(0,0,0,.02);
      margin-top: $gutter-width;
      // padding: $absolute-line-height/2 $gutter-width 0;

      .image-preview {
        display: inline-block;
        margin-#{$omega}: $gutter-width;
        vertical-align: top;
      }

      .image-widget-data {
        width: 100%;
      }

      // hide the text/tooltip 
      .image-widget-data input[type='file'] {
        // color: transparent;
      }

      .image-widget-data input[type="submit"] {
        margin-bottom: 0;
      }

      .text-format-wrapper label {
        // display: inline;
      }

      .cke_contents {
        height: 100px !important;
      }
      
      input[type="file"] {
        @include reset-box-model;
        display: inline-block;
        width: 100%;
        // margin-#{$omega}: $gutter-width;
        @include box-sizing(border-box);
        padding: $absolute-line-height/2 $gutter-width;
        background-color: $firefly5;
        @include cd-sans-serif-family;
        font-size: $small-font-size;
        vertical-align: middle;
        @include border-radius(3px);
        height: auto;
        line-height: 1;

      }

      input[type="submit"] {
        display: inline-block;
        @include checkdesk-button(rgba($gray, 0.6));
        margin: $absolute-line-height/2 0;
        margin-#{$omega}: 0;
      }
    }



    select {
      @include span-columns($w, $w); // small padding with grid accounting
      float: none;
      @include cd-sans-serif-family;
    }

    .form-wrapper {
      clear: both;
      // @include span-columns($w, $w);
      margin: $absolute-line-height/2 0;
    }

    .form-type-textarea {
      @include ctb-clearfix;
      margin-bottom: $absolute-line-height/2;
    }


  }
}

// ======================================================================
// Forms Breakpoints

@include form-standardize;
@include cd-form-styles-except-layout;
@include cd-form-layout($container-width, $container-width, $gutter-width); // Default render of the form layout

// Breakpoint: small
@include at-breakpoint($break-small) {
  $break: $break-small;
  @include cd-form-layout($break - 6, $break) {
    @include pad(0, 0, $break);
    .description {
      display: inline-block; // appears
    }
  }
}

// Breakpoint: medium
@include at-breakpoint($break-medium) {
  $break: $break-medium;
}

// Breakpoint: large
@include at-breakpoint($break-large) {
  $break: $break-large;
}
