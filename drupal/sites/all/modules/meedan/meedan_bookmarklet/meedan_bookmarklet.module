<?php

/**
 * Implementation of hook_init().
 */
function meedan_bookmarklet_init() {
  if (isset($_REQUEST['meedan_bookmarklet'])) {
    // The header below is necessary for Internet Explorer
    // http://stackoverflow.com/questions/98127/accessing-domain-cookies-within-an-iframe-on-internet-explorer
    header("p3p:CP=\"IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\"");
    $GLOBALS['meedan_bookmarklet_page_template'] = TRUE;
    drupal_add_css(drupal_get_path('module', 'meedan_bookmarklet') . '/css/meedan_bookmarklet_inside.css');
    drupal_add_library('meedan_iframes', 'meedan_iframes.child');
  }
}

/**
 * Implements hook_menu().
 */
function meedan_bookmarklet_menu() {
  $items = array();
  $items['admin/config/content/meedan_bookmarklet'] = array(
    'title' => 'Bookmarklet',
    'description' => 'Administer bookmarklet settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meedan_bookmarklet_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['meedan_bookmarklet/js'] = array(
    'title' => 'Bookmarklet',
    'page callback' => 'meedan_bookmarklet_js',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['meedan_bookmarklet/message'] = array(
    'title' => 'Meedan Bookmarklet',
    'page callback' => 'theme',
    'page arguments' => array('meedan_bookmarklet_message'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Which informations can be used to prepopulate fields
 */
function _meedan_bookmarklet_prepopulate() {
  return array(
    'url' => t('URL of the page'),
    'title' => t('Page title'),
    'selected' => t('Text selected by the user'),
  );
}

/**
 * Provide bookmarklet settings for the JavaScript
 */
function meedan_bookmarklet_js() {
  drupal_add_http_header('Content-Type', 'application/json');

  $node_type = variable_get('meedan_bookmarklet_content_type', 'page');

  $settings = array(
    'authenticated' => user_is_logged_in(),
    'stylesheet' => url(variable_get('meedan_bookmarklet_css', ''), array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))),
    'javascript' => url(variable_get('meedan_bookmarklet_js', ''), array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))),
    'default_stylesheet' => url(drupal_get_path('module', 'meedan_bookmarklet') . '/css/meedan_bookmarklet_outside.css', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))),
    'strings' => array(),
    'prepopulate' => array(),
    'url' => url('node/add/' . $node_type, array('query' => array('meedan_bookmarklet' => 1), 'absolute' => TRUE)),
  );

  $hidden_fields = variable_get('meedan_bookmarklet_hidden_fields', array());
  $fields = _meedan_bookmarklet_node_fields($node_type);
  foreach($fields as $key => $field) {
    if (!in_array($key, array_values($hidden_fields), TRUE)) {
      $value = variable_get('meedan_bookmarklet_prepopulate_' . $key, '');
      if (!empty($value)) $settings['prepopulate'][$key] = $value;
    }
  }

  if (!empty($_GET['callback'])) {
    echo $_GET['callback'] .'('. drupal_json_encode($settings) .');';
  }
  else {
    echo drupal_json_encode($settings);
  }
}

/**
 * Helper function to get all fields for a node
 */
function _meedan_bookmarklet_node_fields($node_type) {
  // All nodes have title field, regardless its type, so prepend it as well
  return array('title' => array('label' => t('Title'))) + field_info_instances('node', $node_type);
}

/**
 * Form function for item `admin/config/content/meedan_bookmarklet`.
 */
function meedan_bookmarklet_admin_settings() {
  $node_types = array();
  foreach(node_type_get_types() as $type) {
    $node_types[$type->type] = $type->name;
  }
  $node_type = variable_get('meedan_bookmarklet_content_type', 'page');
  $form['meedan_bookmarklet_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Title will appear on the bookmarklet window.'),
    '#default_value' => variable_get('meedan_bookmarklet_title', ''),
  );
  $form['meedan_bookmarklet_css'] = array(
    '#type' => 'textfield',
    '#title' => t('Stylesheet'),
    '#description' => t('An additional stylesheet file to be applied to the bookmarklet container. Relative paths will be translated into absolute ones based on this host.'),
    '#default_value' => variable_get('meedan_bookmarklet_css', ''),
  );
  $form['meedan_bookmarklet_js'] = array(
    '#type' => 'textfield',
    '#title' => t('JavaScript'),
    '#description' => t('An additional JavaScript file to be applied to the bookmarklet container. Relative paths will be translated into absolute ones based on this host.'),
    '#default_value' => variable_get('meedan_bookmarklet_js', ''),
  );
  $form['meedan_bookmarklet_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#description' => t('Which content type should be created by this bookmarklet. Press <em>Submit</em> button after setting this field in order to update the options below.'),
    '#options' => $node_types,
    '#default_value' => $node_type,
  );
  $fields = array();
  foreach(_meedan_bookmarklet_node_fields($node_type) as $key => $field) {
    $fields[$key] = $field['label'];
  }
  $hidden_fields = variable_get('meedan_bookmarklet_hidden_fields', array());
  $form['meedan_bookmarklet_hidden_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude fields'),
    '#description' => t('Which fields from the chosen content type should *not* be displayed in the bookmarklet form.'),
    '#options' => $fields,
    '#default_value' => $hidden_fields,
  );
  foreach ($fields as $name => $label) {
    if (!in_array($name, array_values($hidden_fields), TRUE)) {
      $form['meedan_bookmarklet_prepopulate_' . $name] = array(
        '#type' => 'select',
        '#title' => t('Pre-populate %field with...', array('%field' => $label)),
        '#options' => _meedan_bookmarklet_prepopulate(),
        '#default_value' => variable_get('meedan_bookmarklet_prepopulate_' . $name, ''),
        '#empty_option' => t('None')
      );
    }
  }
  $form['meedan_bookmarklet_code_preview'] = array(
    '#markup' => l(t('Drag and drop this link to your bookmarks bar'), meedan_bookmarklet_get_code(), array('external' => TRUE, 'absolute' => TRUE)),
  );
  $form['meedan_bookmarklet_force_https'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force HTTPS'),
    '#default_value' => variable_get('meedan_bookmarklet_force_https', 0),
    '#description' => 'Check this option to always load the bookmarklet as HTTPS. If not checked (the default), it will be loaded as HTTPS only if the visited page is under HTTPS.',
  );
  $form = system_settings_form($form);
  return $form;
}

/*
 * Default code for the bookmarklet.
 */
function meedan_bookmarklet_get_code() {
  $force_https = intval(variable_get('meedan_bookmarklet_force_https', 0));
  $js_url      = url(drupal_get_path('module', 'meedan_bookmarklet') . '/js/meedan_bookmarklet.js', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  $setting_url = url('meedan_bookmarklet/js', array('query' => array('callback' => '?'), 'absolute' => TRUE));
  $hostname    = $_SERVER['HTTP_HOST'];
  $timestamp   = time(); // Avoids cache

  return "javascript:("
       .   "function () {"
       .     "window.meedanBookmarkletProtocol = (((document.location.protocol === 'https:') || $force_https) ? 'https' : 'http');"
       .     "window.meedanBookmarkletURL = '$setting_url'.replace(/^https?/, window.meedanBookmarkletProtocol);"
       .     "window.meedanBookmarkletHost = '$hostname';"

       .     "if (window.meedanBookmarklet !== undefined) {"
       .       "meedanBookmarklet();"
       .     "} else {"
       .       "var src = '$js_url?$timestamp'.replace(/^https?/, window.meedanBookmarkletProtocol);"

       .       "document.body.appendChild(document.createElement('script')).src = src;"
       .     "}"
       .   "}"
       . ")();";
}

/**
 * Implements hook_theme().
 */
function meedan_bookmarklet_theme() {
  return array(
    'meedan_bookmarklet_html' => array(
      'template' => 'meedan-bookmarklet-html',
      'render element' => 'html'
    ),
    'meedan_bookmarklet_page' => array(
      'template' => 'meedan-bookmarklet-page',
      'render element' => 'page'
    ),
    'meedan_bookmarklet_message' => array(
      'template' => 'meedan-bookmarklet-message',
    ),
  );
}

/**
 * Implements hook_preprocess_html().
 */
function meedan_bookmarklet_preprocess_html(&$variables, $hook) {
  if (!empty($GLOBALS['meedan_bookmarklet_page_template'])) {
    $variables['theme_hook_suggestions'][] = 'meedan_bookmarklet_html';
    $variables['meedan_bookmarklet_title'] = t(variable_get('meedan_bookmarklet_title', ''));
    $variables['meedan_bookmarklet_messages'] = array();
    $variables['meedan_bookmarklet_close'] = l('<span>[X]</span>', '', array('html' => TRUE, 'attributes' => array('id' => 'meedan_bookmarklet_close', 'onclick' => 'window.parent.postMessage(\'close\', \'*\')')));
  }
}

/**
 * Implements hook_preprocess_page().
 */
function meedan_bookmarklet_preprocess_page(&$variables, $hook) {
  if (!empty($GLOBALS['meedan_bookmarklet_page_template'])) {
    $variables['theme_hook_suggestions'][] = 'meedan_bookmarklet_page';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hide chosen fields from display and prepopulate some fields.
 */
function meedan_bookmarklet_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == variable_get('meedan_bookmarklet_content_type', 'page') . '_node_form') {
    if (!empty($GLOBALS['meedan_bookmarklet_page_template'])) {

      drupal_add_js(array('meedanIframes' => array('contentSelector' => '.cd-embed')), 'setting');

      // Prepopulate fields
      // FIXME Not sure if all cases are handled here, or if it is the best approach... maybe use entityreference_prepopulate? Or prepopulate? Functions from Field API? From Entity API? From both?
      if (isset($_REQUEST['meedan_bookmarklet_prepopulate'])) {
        foreach ($_REQUEST['meedan_bookmarklet_prepopulate'] as $field => $value) {
          if (array_key_exists('#default_value', $form[$field])) $form[$field]['#default_value'] = $value;
          else {
            $lang = $form[$field]['#language'];
            foreach ($form[$field][$lang] as $index => $settings) {
              if (is_numeric($index) && is_array($settings) && array_key_exists('#default_value', $settings)) {
                if ($settings['#type'] == 'link_field') $form[$field][$lang][$index]['#default_value']['url'] = $value;
                else $form[$field][$lang][$index]['#default_value'] = $value;
              }
              else if ($index == '#default_value') {
                if (is_array($form[$field][$lang][$index])) $form[$field][$lang][$index] = explode(',', $value);
                else $form[$field][$lang][$index] = $value;
              }
            }
          }
        }
      }
    }
    // Hide fields on form creation
    if (!isset($form['nid']['#value'])) {
      foreach (variable_get('meedan_bookmarklet_hidden_fields', array()) as $field) {
        $form[$field]['#access'] = FALSE;
      }
    }
  }
}

/*
 * Implements hook_page_alter().
 *
 * Redirect to login form if not logged in.
 */
function meedan_bookmarklet_page_alter(&$page) {
  if (drupal_get_http_header('Status') == '403 Forbidden' && isset($_GET['meedan_bookmarklet'])) {
    // Using drupal_goto() with destination set causes a recursive redirect loop
    // Need to decode URL to prevent double-encoding UTF-8 characters https://drupal.org/node/1403616
    $bookmarklet_options = array('meedan_bookmarklet' => 1, 'meedan_bookmarklet_prepopulate' => $_GET['meedan_bookmarklet_prepopulate']);
    $origin = drupal_get_destination();
    $destination = urldecode($origin['destination']) . '?' . drupal_http_build_query($bookmarklet_options);
    header('Location: ' . url('user/login', array('query' => array_merge(array('destination' => $destination), $bookmarklet_options), 'absolute' => TRUE)), TRUE, 302);
    drupal_exit();
  }
}

/*
 * Implements hook_node_insert().
 *
 * Redirect to a blank page with message and link.
 */
function meedan_bookmarklet_node_insert($node) {
  if (!empty($GLOBALS['meedan_bookmarklet_page_template']) && $node->type == variable_get('meedan_bookmarklet_content_type', 'page')) {
    drupal_get_messages();
    drupal_set_message(t('<a href="!url" target="_blank">Content</a> created successfully.', array('!url' => url('node/' . $node->nid, array('absolute' => TRUE)))));
    // Hack to avoid other hooks from not being called: http://drupal.org/node/130734#comment-3835244
    $_GET['destination'] = url('meedan_bookmarklet/message', array('query' => array('meedan_bookmarklet' => 1)));
  }
}

