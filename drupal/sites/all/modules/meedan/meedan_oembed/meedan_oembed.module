<?php

/**
 * Implementation of hook_theme().
 */
function meedan_oembed_theme() {
  $path = drupal_get_path('module', 'meedan_oembed') . '/theme';
  $file = 'meedan_oembed.theme.inc';

  return array(
    'oembed__link__meedan_oembed_generic' => array(
      'variables' => array('embed' => NULL),
      'template' => 'oembed-generic',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_oembed_missing' => array(
      'variables' => array('media' => NULL),
      'template' => 'oembed-missing',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_oembed_thumbnail_generic' => array(
      'variables' => array('url' => NULL, 'attributes' => NULL, 'title' => NULL),
      'template' => 'oembed-thumbnail',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_oembed_link' => array(
      'variables' => array('path' => NULL, 'options' => NULL, 'text' => NULL),
      'path' => $path,
      'file' => $file,
    ),
    'meedan_oembed_thumbnail_google_maps' => array(
      'variables' => array('url' => NULL, 'attributes' => NULL, 'title' => NULL),
      'template' => 'oembed-thumbnail-google-maps',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_inline_thumbnail' => array(
      'variables' => array('element' => NULL),
      'template' => 'meedan-inline-thumbnail--generic',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_inline_full_mode' => array(
      'variables' => array('element' => NULL),
      'template' => 'meedan-inline-full-mode--generic',
      'path' => $path,
      'file' => $file,
    ),
    'meedan_full_mode' => array(
      'variables' => array('element' => NULL),
      'template' => 'meedan-full-mode--generic',
      'path' => $path,
      'file' => $file,
    ),

  );
}

/**
 * Fetch data for an embeddable URL.
 *
 * All request data is cached (even if error).
 *
 * Oembed sequence
 *   1. Hit cache
 *   2. Call custom scrape function if exist
 *   3. Ask oEmbed core to render for us
 *   4. Call Embedly
 *
 * @param string $url
 *   An external URL for the content to embed.
 * @param array $attributes
 *   An associative array of attributes, with the following keys:
 *   - 'maxwidth'
 *       The maximum width of the embed, in pixels.
 *   - 'maxheight'
 *       The maximum height of the embed, in pixels.
 * @param boolean $retry_if_error
 *   Whether the media should be reparsed if an error happened. Defaults to FALSE.
 * @param boolean $no_cache
 *   Optional, when set to TRUE the cache will be ignored AND reset for this
 *   oembed response.
 * @return
 *   an object representing the embeddable data of the URL.
 */
function meedan_oembed_data($url, $attributes = array(), $retry_if_error = FALSE, $no_cache = FALSE) {
  $provider = array();
  $provider['endpoint'] = 'http://api.embed.ly/1/oembed';

  // Set provider name specific to domain name to use it on #theme function
  $domain  = _meedan_oembed_get_domain_name($url);
  $handler = meedan_oembed_get_handler_for_domain($domain);

  if ($handler && isset($handler['provider_name'])) {
    $provider['name'] = $handler['provider_name'];
  }
  else if (function_exists('template_preprocess_oembed__link__meedan_oembed_' . $domain)) {
    $provider['name'] = 'meedan_oembed_' . $domain;
  }
  else {
    $provider['name'] = 'meedan_oembed_generic';
  }

  $attributes = array_filter($attributes);
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);

  $element = oembedcore_render_cache('oembed_request', $url, $attributes);

  $cache_key = implode(':', $element['#cache']['keys']);
  $cache     = cache_get($cache_key, $element['#cache']['bin']);

  $embed = FALSE;

  // Cache hit
  if (!$no_cache && $cache && isset($cache->data) && (!isset($cache->data->error) || !$cache->data->error || !$retry_if_error)) {
    $embed = $cache->data;
    $embed->original_url = $url;
    $embed->provider = $provider;

    drupal_alter('meedan_oembed_embed', $embed);

    return $embed;
  }
  // Ask for fresh data, remove cache first
  else if ($cache) {
    // Clear cached markup as well
    $template = oembedcore_render_cache('oembed', $url);
    cache_clear_all(implode(':', $template['#cache']['keys']), $template['#cache']['bin'], TRUE);
    cache_clear_all($cache_key, $element['#cache']['bin']);
  }

  // Call scrape function first if exist
  if ($handler && function_exists($handler['callback'])) {
    $embed = $handler['callback']($provider, $url);
  }

  if (!$embed || (isset($embed->error) && $embed->error)) {
    $original_embed = $embed;

    if (!$embed || $embed->try_embedly) {
      // Ask oEmbed core to render for us
      if ($embed = oembedcore_oembed_data($url, $attributes)) {
        // Nothing to do
      }
      // Call Embedly
      else {
        $matches = array();
        $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);
      }
    }

    // Embedly failed, provide some fallback embed content
    if (is_null($embed) || $embed === FALSE || (isset($embed->error) && $embed->error)) {
      // Ensure NULL and FALSE become (object) array()
      $embed = (object) $embed;
      unset($embed->scalar);

      $url_info = parse_url($url);

      $embed->type          = 'link';
      $embed->provider      = array('name' => '', 'callback' => NULL, 'endpoint' => NULL);
      $embed->title         = '';
      $embed->url           = $url;
      $embed->error         = TRUE;
      $embed->original_url  = $url;
      $embed->provider_name = '';
      $embed->provider_url  = $url_info['scheme'] . '://' . $url_info['host'];
      $embed->thumbnail_url = url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));

      // In the case where Embedly was used as a fallback the first error message
      // from the $handler['callback'] is likely more accurate. Use it instead.
      if ($original_embed && $original_embed->error && $original_embed->error_message) {
        $embed->error_message = $original_embed->error_message;
      }
    }
  }

  if ($embed && (!isset($embed->error) || !$embed->error)) {
    meedan_oembed_add_extra_information($embed);
    $embed->error = FALSE;
  }
  drupal_alter('meedan_oembed_embed', $embed);

  // Set result to cache, even if error
  cache_set($cache_key, $embed, $element['#cache']['bin'], $element['#cache']['expire']);

  return $embed;
}

/**
 * Scrape page to extract oEmbed-relevent information.
 */
function meedan_oembed_add_extra_information(&$embed) {
  // TODO Get thumbnail.
  if (empty($embed->thumbnail_url)) {
    if ($embed->type == 'photo') {
      // put original url as thumbnail url
      // if original url is itself an image path
      $original_image = getimagesize($embed->original_url);
      if (isset($original_image)) {
        $embed->thumbnail_url = $embed->original_url;
      }
    }
  }
  if ($embed->provider_name == 'YouTube' && !empty($embed->thumbnail_url)) {
    // Use Youtube thumbnail that doesn't have black borders
    $embed->thumbnail_url = str_replace('hqdefault.jpg', 'mqdefault.jpg', $embed->thumbnail_url);
  }
}

/**
 * Implements hook_node_load().
 */
function meedan_oembed_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if ($node->type == 'media' && isset($node->field_link[LANGUAGE_NONE][0]['url'])) {
      $nodes[$nid]->embed = meedan_oembed_data($node->field_link[LANGUAGE_NONE][0]['url']);
    }
  }
}

/**
 * Implements of hook_element_info_alter().
 */
function meedan_oembed_element_info_alter(&$type) {
  // Override oEmbed's pre_render hooks with ours.
  foreach (array('oembed', 'oembed_bare', 'oembed_thumbnail') as $key) {
    foreach ($type[$key]['#pre_render'] as &$pre_render) {
      if ($pre_render == 'oembedcore_pre_render_fetch') {
        $pre_render = 'meedan_oembed_pre_render_fetch';
      }
    }
  }
}

/**
 * Pre render fetches the oEmbed data.
 * Copy of oembedcore_pre_render_fetch with meedan_oembed_data() called instead of oembedcore_oembed_data().
 */
function meedan_oembed_pre_render_fetch($element) {
  $embed = meedan_oembed_data($element['#url'], $element['#options']);

  // Prevent rendering if the response is bad.
  if (!$embed) {
    $element['#printed'] = TRUE;
    return $element;
  }

  $element['#embed'] = $embed;

  // Recalculate cache expire time based on response.
  if (isset($embed->cache_age) && $element['#cache']['expire'] != CACHE_PERMANENT) {
    $expire = REQUEST_TIME + intval($embed->cache_age);
    if ($expire > $element['#cache']['expire']) {
      $element['#cache']['expire'] = $expire;
    }
  }

  return $element;
}

/**
 * Implements hook_entity_info_alter().
 */
function meedan_oembed_entity_info_alter(&$entity_info) {
    $entity_info['node']['view modes']['meedan_oembed'] = array(
        'label' => t('Meedan oEmbed'),
        'custom settings' => TRUE,
    );
    $entity_info['node']['view modes']['checkdesk_collaborate'] = array(
        'label' => t('Checkdesk collaborate'),
        'custom settings' => TRUE,
    );
    $entity_info['node']['view modes']['checkdesk_search'] = array(
        'label' => t('Checkdesk search'),
        'custom settings' => TRUE,
    );
}

/**
 * Implements of hook_node_presave();
 */
function meedan_oembed_node_presave($node) {
  if ($node->type == 'media') {
    // Set report title and description
    $link = $node->field_link[LANGUAGE_NONE][0]['url'];
    $old_link = (isset($node->original) ? $node->original->field_link[LANGUAGE_NONE][0]['url'] : '');
    $embed = meedan_oembed_data($link, array(), FALSE, TRUE);
    $node->status = ((isset($embed->error) && $embed->error) ? 0 : 1);
    if (empty($node->title) || (isset($node->original) && $link !== $old_link && $node->title === $node->original->title)) {
      if (!empty($embed->title)) {
        $node->title = truncate_utf8($embed->title, 255);
      }
      else {
        // auto-generate report title (ticket #3314)
        $embed_source = isset($embed->author_name) ? $embed->author_name : $embed->provider_name;
        $node->title = t('!type from !source', array('!type' => $embed->type, '!source' => $embed_source));
      }
    }
    if (!empty($embed->description) &&
       (empty($node->body[LANGUAGE_NONE][0]['value']) ||
       (isset($node->original) &&
        $link !== $old_link &&
        html_entity_decode(strip_tags($node->body[LANGUAGE_NONE][0]['value'])) ===
        html_entity_decode(strip_tags($node->original->body[LANGUAGE_NONE][0]['value']))))) {
      // $node->body[LANGUAGE_NONE][0]['value'] = $embed->description;
    }
  }
}

/**
 * Overwrite oembed template
 * add favicon and domain link.
 */
function meedan_oembed_preprocess_oembed(&$vars, $hook) {
  $embed = $vars['embed'];
  if ($embed) {

    $vars['original_url'] = $embed->original_url;

    $vars['classes_array'][] = 'oembed-'. $embed->type;
    $vars['title_attributes_array']['class'] = 'oembed-title';
    $vars['content_attributes_array']['class'] = 'oembed-content';

    // oEmbed links render using core link theme unless other preprocess
    // functions suggest other hooks.
    if ($embed->type == 'link') {
      $vars['title_attributes_array']['class'] .= ' oembed-link';

      $vars['theme_hook_suggestions'][] = 'meedan_oembed_link';
      $vars['path'] = $embed->original_url;
      $vars['text'] = $embed->title;
      $vars['options'] = array(
        'absolute' => TRUE,
        'attributes' => $vars['title_attributes_array'],
        'html' => TRUE,
      );

      $vars['thumbnail_url'] = isset($embed->thumbnail_url) ? $embed->thumbnail_url : '';
    }
    $vars['provider_name'] = $embed->provider_name;
    $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
    if (isset($embed->favicon_link)) {
      $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
    }
    else {
      $vars['favicon_link'] = '';
    }
    if ($embed->error) $vars['embed_error'] = t('It was not possible to parse this report.');
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function meedan_oembed_field_formatter_info() {
  $formatters = array(
    'meedan_oembed_thumbnail' => array(
      'label' => t('Meedan oEmbed Thumbnail'),
      'field types' => array('link_field'),
      'description' => t('Embeds links as thumbnails if possible - otherwise just links them.'),
      'settings' => array('imagestyle' => ''),
    ),
    'meedan_inline_thumbnail' => array(
      'label' => t('Meedan inline thumbnail'),
      'field types' => array('link_field'),
      'description' => t('Embeds links as inline thmbnail.'),
    ),
    'meedan_inline_full_mode' => array(
      'label' => t('Meedan inline full mode'),
      'field types' => array('link_field'),
      'description' => t('Embeds links as inline full mode.'),
    ),
    'meedan_full_mode' => array(
      'label' => t('Meedan full mode'),
      'field types' => array('link_field'),
      'description' => t('Embeds links as full mode.'),
    ),
  );

  return $formatters;
}

function theme_meedan_inline_thumbnail($element) {
  return 'render inline thumbnail';
}
/**
 * Implements hook_field_formatter_settings_form().
 */
function meedan_oembed_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['imagestyle'] = array(
    '#title' => t('Image Style'),
    '#type' => 'select',
    '#options' => image_style_options(),
    '#default_value' => !empty($settings['imagestyle']) ?  $settings['imagestyle'] : 'default',
  );

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function meedan_oembed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'meedan_inline_thumbnail') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => theme('meedan_inline_thumbnail', array('element' => $item, 'field' => $instance, 'entity' => $entity)),
      );
    }
  }
  elseif ($display['type'] == 'meedan_inline_full_mode') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => theme('meedan_inline_full_mode', array('element' => $item, 'entity' => $entity)),
      );
    }
  }
  elseif ($display['type'] == 'meedan_full_mode') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => theme('meedan_full_mode', array('element' => $item, 'entity' => $entity)),
      );
    }
  }
  else {
    foreach ($items as $delta => $item) {
      $attributes = array();
      $attributes = array_filter($display['settings']);
      $url = url($item['url'], $item + array('external' => TRUE));
      $domain = _meedan_oembed_get_domain_name($url);
      $theme = 'meedan_oembed_thumbnail_' . $domain;
      $args = array('title' => $entity->title, 'url' => $url, 'attributes' => $attributes);
      $hooks = theme_get_registry(FALSE);
      if (isset($hooks[$theme])) {
        $element[$delta] = array('#markup' => theme($theme, $args));
      }
      else {
        $element[$delta] = array('#markup' => theme('meedan_oembed_thumbnail_generic', $args));
      }
    }
  }
  return $element;
}

function _meedan_render_oembed_activity_type($node, $heartbeat_row) {
  // TODO: get this mapping from admin interface.
  // for now will use mapping array with key = activity type and value = formatter name.
  $mapping = array(
    'checkdesk_report_suggested_to_story' => 'meedan_inline_full_mode',
  );

  if ($heartbeat_row && isset($mapping[$heartbeat_row->heartbeat_activity_message_id])) {
    $output = field_view_field('node', $node, 'field_link', array('type' => $mapping[$heartbeat_row->heartbeat_activity_message_id]));
  }
  else {
    $output = field_view_field('node', $node, 'field_link', array('type' => 'meedan_inline_thumbnail'));
  }
  return $output;
}

function _meedan_inline_thumbnail_bg($node, $classes = array()) {
  if (isset($node->embed->thumbnail_url)) {
    $thumbnail_url = $node->embed->thumbnail_url;
    $thumbnail_title = isset($node->embed->title) ? $node->embed->title : $node->title;
  }
  elseif (isset($node->field_lead_image['und'][0]['uri'])) {
    $derivative_uri = image_style_path('medium', $node->field_lead_image['und'][0]['uri']);
    $success = file_exists($derivative_uri) || image_style_create_derivative('medium', $node->field_lead_image['und'][0]['uri'], $derivative_uri);
    $thumbnail_url = file_create_url($derivative_uri);
    $thumbnail_title = $node->title;
  }
  else {
    $thumbnail_url = '';
  }

  $inline_thumbnail = '';
  if ($thumbnail_url) {
    $inline_thumbnail = l('', 'node/' . $node->nid, array('html' => TRUE,
      'attributes' => array(
        'class' => is_array($classes) ? $classes : array(),
        'title' => t(check_plain($thumbnail_title)),
        'style' => 'background-image: url("' . $thumbnail_url . '")'
      )));
  }

  return $inline_thumbnail;
}

/**
 * Get favicon for URL and cache it locally.
 * @param string $url
 *  media URL
 * @return string
 *  path of favicon
 * @see https://github.com/vincepare/FaviconDownloader
 */
require_once libraries_get_path('FaviconDownloader') . '/src/FaviconDownloader.php';
use Vincepare\FaviconDownloader\FaviconDownloader;
function _meedan_oembed_fetch_favicon($url, $force = FALSE) {
  $default = drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png';

  // Create/check favicon directory.
  $files_path = file_default_scheme() . '://';
  $favicon_dir = 'oembed_favicon/';
  $favicon_path = $files_path . $favicon_dir;
  if (!file_prepare_directory($favicon_path, FILE_CREATE_DIRECTORY)) {
    watchdog('meedan_oembed', 'Failed to create "files/oembed_favicon" folder. Aborting favicon fetch.', array(), WATCHDOG_ERROR);
    return $default;
  }

  // Generate favicon filename and check cache.
  $mod_url = trim(str_replace(array('http://', 'https://', 'http:/', 'https:/'), '', trim($url)), '/');
  $mod_url = parse_url('http://' . $mod_url);
  $mod_url['host'] = str_replace('www.', '', $mod_url['host']);
  $favicon_path .= str_replace(array('.', '/'), '-', $mod_url['host']);
  $files = glob(drupal_realpath($favicon_path) . '.*');
  if ($files && !$force) {
    return $favicon_path . '.' . pathinfo($files[0], PATHINFO_EXTENSION);
  }

  // Fetch favicon and fallback to default if necessary.
  $favicon = new FaviconDownloader($url);
  if (!$favicon->icoExists) {
    $favicon_path .= '.png';
    watchdog('meedan_oembed', 'Failed to fetch favicon for "@url". Using default thumbnail.', array('@url' => $url), WATCHDOG_ERROR);
    if (!file_unmanaged_copy($default, $favicon_path)) {
      watchdog('meedan_oembed', 'Failed to copy default thumbnail to "@path". Aborting caching.', array('@path' => $favicon_path), WATCHDOG_ERROR);
      return $default;
    }
    return $favicon_path;
  }

  // Save new favicon.
  $favicon_path .= '.' . $favicon->icoType;
  if (!file_put_contents($favicon_path, $favicon->icoData)) {
    watchdog('meedan_oembed', 'Failed to save favicon file to "@path". Aborting caching.', array('@path' => $favicon_path), WATCHDOG_ERROR);
    return $favicon->icoUrl;
  }

  watchdog('meedan_oembed', 'Favicon downloader output: @output', array(
    '@output' => print_r($favicon->debug(TRUE), TRUE),
  ), WATCHDOG_DEBUG);
  return $favicon_path;
}

/**
 * Returns the hook_meedan_oembed() handler information for a given domain.
 */
function meedan_oembed_get_handler_for_domain($domain) {
  $handlers = module_invoke_all('meedan_oembed');

  if (array_key_exists($domain, $handlers)) {
    return $handlers[$domain];
  }

  return FALSE;
}

/**
 * Get domain name from url.
 * Get site name.
 * Choose largest token of the host.
 */
function _meedan_oembed_get_domain_name($url) {
  //set domain for google maps including short link
  if (stripos($url, 'maps.google') || stripos($url, 'goo.gl/maps')) {
    return 'google_maps';
  }
  $parts = explode('.', parse_url($url, PHP_URL_HOST));
  $domain = '';
  foreach ($parts as $part) {
    if (strlen($part) > strlen($domain)) {
      $domain = $part;
    }
  }
  if ($domain == 'google' && stripos($url, '/maps')) {
    $domain = 'google_maps';
  }
  return strtolower($domain);
}

/**
 * Any string beginning with at least one Arabic character is deemed
 * to be Arabic.
 */
function meedan_oembed_needs_rtl($text) {
  return (boolean) preg_match('/^\p{Arabic}/u', $text);
}

/**
 * Implements hook_filter_info().
 */
function meedan_oembed_filter_info() {
  $filters['filter_meedan_oembed'] = array(
    'title' => t('Meedan oEmbed filter'),
    'description' => t('Every instance of [media-title:$nid] will be replaced with the corresponding Meedan oEmbed node view.'),
    'prepare callback' => '_meedan_oembed_filter_prepare',
    'process callback' => '_meedan_oembed_filter_process',
    'tips callback' => '_meedan_oembed_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Meedan oEmbed filter prepare callback.
 */
function _meedan_oembed_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace nid with meedan oembed node view.
 */
function _meedan_oembed_filter_process($text, $filter) {
  $matches = array();
  preg_match_all('/\[[^:\]]+:([0-9]+)\]/u', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          // Render node using custom Meedan oEmbed view.
          $element = node_view($node, 'meedan_oembed');
          $element['comments'] = comment_node_page_additions($node);
          $node_view = drupal_render($element);
          // Replace [media-title:$nid] with node view.
          $text = str_replace($matches[0][$key], $node_view, $text);
        }
        else {
          $missing = theme('meedan_oembed_missing', array('media' => $matches[0][$key]));
          $text = str_replace($matches[0][$key], $missing, $text);
        }
      }
    }
  }
  return $text;
}

/**
 * Filter tips callback for meedan oembed filter.
 *
 */
function _meedan_oembed_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>[media-title:$nid]</em> is replaced with the Meedan oEmbed node view for <em>$nid</em>.');
}
