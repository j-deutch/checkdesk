<?php

/**
 * Implements hook_menu().
 */
function meedan_notifications_menu() {
  $items = array();
  $items['user/%user/notifications'] = array(
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'meedan_notifications_access',
    'access arguments' => array(1),
    'title' => 'Notifications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meedan_notifications_user_page', 1),
  );
  $items['admin/config/people/notifications'] = array(
    'title' => 'Notifications',
    'description' => 'Administer notification settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meedan_notifications_admin_settings'),
    'access arguments' => array('administer site configuration'), 
  );
  $items['user/update-last-time'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'meedan_notifications_set_last_time_menu_opened',
    'access arguments' => array('access content'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Form function for item `admin/config/people/notifications`.
 */
function meedan_notifications_admin_settings() {
  $form['meedan_notifications_sender'] = array(
    '#type' => 'textfield',
    '#title' => t('Notification email sender'),
    '#default_value' => variable_get('meedan_notifications_sender', ''),
    '#description' => t('The FROM value that will appear on the notification email. Defaults to "site-name <site-mail>".'),
  );
  $form['meedan_notifications_list_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of items on notifications list'),
    '#default_value' => variable_get('meedan_notifications_list_limit', ''),
    '#description' => t('How many items to return on notifications list. Please note that if this value is not set or equals 0, all objects will be returned.'),
  );
  $form['meedan_notifications_since'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days since when notifications should be got'),
    '#default_value' => variable_get('meedan_notifications_since', ''),
    '#description' => t('How many days should be considered to return items on notifications list. Please note that if this value is not set or equals 0, all items will be shown (not recommended).'),
  );
  $form['meedan_notifications_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable mail sendings for notifications'),
    '#default_value' => variable_get('meedan_notifications_enabled', TRUE),
  );
  return system_settings_form($form);
}

/**
 * Menu access function.
 * Only allow users to see their own notification settings.
 */
function meedan_notifications_access($account) {
  global $user;
  return $user->uid == $account->uid || user_access('administer site configuration');
}

/**
 * Implements hook_meedan_notifications_events().
 */
function meedan_notifications_meedan_notifications_events() {
  return array(
    'discussion' => array(
      'label' => t('New discussion'),
      'token type' => 'node',
    ),
    'comment' => array(
      'label' => t('New comment'),
      'token type' => 'comment',
    ),
    'user' => array(
      'label' => t('New user'),
      'token type' => 'user',
    ),
  );
}

/**
 * API to retrieve notification events.
 */
function meedan_notifications_get_events($key = 'all', $reset = FALSE) {
  $events = &drupal_static(__FUNCTION__, array());
  if (empty($events) || $reset) {
    $events = module_invoke_all('meedan_notifications_events');
    drupal_alter('meedan_notifications_events', $events);
  }
  if ($key == 'all') {
    return $events;
  }
  else {
    $result = array();
    foreach ($events as $event => $info) {
      $result[$event] = $info[$key];
    }
    return $result;
  }
}

/**
 * Form function for form `meedan_notifications_user_page`.
 * Custom user notifications tab.
 */
function meedan_notifications_user_page($form, $form_state, $account) {
  $events = meedan_notifications_get_events('label');
  $subscriptions = isset($account->data['meedan_notifications']) ? $account->data['meedan_notifications'] : array_keys($events);

  $form['subscriptions'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Notify me by e-mail or on site when...'),
    '#options' => $events,
    '#default_value' => $subscriptions,
    '#theme' => 'meedan_notifications_checkboxes',
  );
  $form['account_uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

/**
 * Implements hook_theme().
 */
function meedan_notifications_theme() {
  return array(
    'meedan_notifications_checkboxes' => array(
      'render element' => 'element'
    )
  );
}

/**
 * Theme function for `meedan_notification_checkboxes`.
 */
function theme_meedan_notifications_checkboxes($variable) {
  $element = $variable['element'];

  $header = array(
    t('Event'),
    array('data' => t('On site'), 'class' => 'notifications-preferences-site'),
    array('data' => t('By e-mail'), 'class' => 'notifications-preferences-email'),
  );

  $events = $element['#options'];
  $rows = array();
  foreach ($events as $name => $label) {
    list($context, $event) = explode('_', $name, 2);
    $i = ($context == 'site' ? 1 : 2);
    if (!isset($rows[$event])) {
      $title = preg_replace('/^[^:]+: /u', '', $label);
      $rows[$event] = array($title, '', '');
    }
    unset($element[$name]['#title']);
    $rows[$event][$i] = render($element[$name]);
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('notifications-preferences'))));
}

/**
 * Submit function for form `meedan_notifications_user_page`. 
 */
function meedan_notifications_user_page_submit($form, &$form_state) {
  $account = user_load($form_state['values']['account_uid']);
  user_save($account, array('data' => array('meedan_notifications' => $form_state['values']['subscriptions'])));
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_action_info().
 */
function meedan_notifications_action_info() {
  return array(
    'meedan_notifications_action' => array(
      'type' => 'system',
      'label' => t('Notify subscribed users'),
      'configurable' => TRUE,
    ),
  );
}

/**
 * Form function for action `meedan_notifications_action`.
 */
function meedan_notifications_action_form($context) {
  $options = meedan_notifications_get_events('label');
  $form['event'] = array(
    '#type' => 'radios',
    '#title' => t('Event'),
    '#options' => $options,
    '#default_value' => @$context['event'],
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('The notification email subject. In addition to the tokens listed below, you can also use [recipient] which will be filled with the account information of each recipient.'),
    '#default_value' => @$context['subject'],
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('The notification email body. In addition to the tokens listed below, you can also use [recipient] which will be filled with the account information of each recipient.'),
    '#default_value' => @$context['message'],
  );
  $form['actor'] = array(
    '#type' => 'textfield',
    '#title' => t('Actor'),
    '#description' => t('The uid of the actor who executed the notified action.'),
    '#default_value' => @$context['actor'],
  );
  $form['t_args'] = array(
    '#type' => 'value',
    '#value' => @$context['t_args'],
  );
  if (module_exists('token')) {
    $form['token_tree'] = array(
      '#theme' => 'token_tree', 
      '#token_types' => array('node', 'user'),
    );
  }
  else {
    $form['token_tree'] = array(
      '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
    );
  }
  return $form;
}

/**
 * Form submit function for action `meedan_notifications_action`.
 */
function meedan_notifications_action_submit($form, $form_state) {
  $params = array();
  $params['event'] = $form_state['values']['event'];
  $params['subject'] = $form_state['values']['subject'];
  $params['message'] = $form_state['values']['message'];
  $params['actor'] = $form_state['values']['actor'];
  $params['t_args'] = (array)$form_state['values']['t_args'];
  return $params;
}

/**
 * Action function for action `meedan_notifications_action`.
 * Sends email to computed recipients of the event.
 */
function meedan_notifications_action($object, $context) {
  if (variable_get('meedan_notifications_enabled', TRUE)) {
    // Get recipients.
    $uids = NULL;//drupal_static(__FUNCTION__);
    $hash = md5(serialize($object));
    if (!isset($uids[$hash])) {
      if (empty($context['event'])) {
        $context['event'] = $object->type; // sane default in case of human error
      }
      $uids = module_invoke_all('meedan_notifications_recipients', $object, $context);
      if (count($uids) > 0) $uids = array_combine($uids, $uids); // turn into [uid=>uid]
      drupal_alter('meedan_notifications_recipients', $uids, $object, $context);
    }
    
    // Debug uids.
    // @see http://dropbucket.org/node/211 to assign an array value to a variable using drush.
    $uids = array_merge($uids, variable_get('meedan_notifications_debug_uids', array()));

    // Send email to each recipient.
    $from = variable_get('meedan_notifications_sender', variable_get('site_mail', NULL));
    foreach (user_load_multiple($uids) as $uid => $account) {
      drupal_mail(
        'meedan_notifications',
        $context['event'],
        $account->name . ' <' . $account->mail . '>',
        user_preferred_language($account),
        array('account' => $account, 'object' => $object, 'context' => $context),
        $from
      );
    }
  }
}

/**
 * Implements hook_meedan_notifications_recipients().
 * Used to populate recipient list.
 */
function meedan_notifications_meedan_notifications_recipients($object, $context) {
  $uids = array();
  switch ($context['event']) {
    case 'discussion':
      $uids = db_query("SELECT uid FROM {users}")->fetchCol(); // all users 
      break;
    case 'comment':
      $uids = db_query("SELECT uid FROM {comment} WHERE nid = :nid", array(':nid' => $object->nid))->fetchCol(); // other commenters
      $discussion = node_load($object->nid);
      $uids[] = $discussion->uid; // discussion author
      break;
    case 'user':
      $uids = db_query("SELECT uid FROM {users}")->fetchCol(); // all users
      break;
  }
  return $uids;
}

/**
 * Implements hook_meedan_notifications_recipients_alter().
 * Used to restrict recipient list.
 */
function meedan_notifications_meedan_notifications_recipients_alter(&$uids, $object, $context) {
  // Remove author.
  if (in_array($context['event'], array('discussion', 'comment', 'user'))) {
    unset($uids[$object->uid]);
  }

  // Remove anonymous.
  unset($uids[0]);

  // Remove actor, if set
  if (!empty($context['actor'])) {
    unset($uids[$context['actor']]);
  }

  // Look on remaining recipients to remove unwanted ones.
  $events = meedan_notifications_get_events();
  foreach (user_load_multiple($uids) as $uid => $account) {
    // Remove users who have opted out.
    $subscriptions = ($account->data && isset($account->data['meedan_notifications'])) ? $account->data['meedan_notifications'] : array_keys($events);
    if (!in_array($context['event'], array_filter($subscriptions))) {
      unset($uids[$uid]);
    }
    
    // Remove users who are blocked.
    if (!$account->status) {
      unset($uids[$uid]);
    }
  }
}

/**
 * Implements hook_mail().
 */
function meedan_notifications_mail($key, &$message, $params) {
  global $base_path, $base_root;

  $account = $params['account'];
  $object = $params['object'];
  $context = $params['context'];

  $events = meedan_notifications_get_events('token type');
  $languages = language_list();
  $options = array(
    'sanitize' => FALSE,
  );
  if (!empty($account->language) && $account->language != LANGUAGE_NONE) {
    $options['language'] = $languages[$account->language];
  }

  // translate t_args.
  $t_args = array();
  if (!empty($context['t_args'])) foreach ($context['t_args'] as $t_placeholder => $t_arg) {
    // URLs must be localized
    if (preg_match('/^https?:\/\//', $t_arg)) {
      $url = parse_url($t_arg);
      if ($url && $url['scheme'] . '://' . $url['host'] == $base_root) {
        $path = preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $url['path']);
        if (variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) $path = preg_replace('/^[^\/]+\//', '', $path);
        $t_args[$t_placeholder] = url($path, array('language' => $languages[$account->language], 'absolute' => TRUE, 'alias' => TRUE));
      }
    }
    else {
      $t_args[$t_placeholder] = t($t_arg, array(), array('langcode' => $account->language));
    }
  }
  
  $subject = t($context['subject'], $t_args, array('langcode' => $account->language));
  $subject = token_replace($subject, array('recipient' => $account, $events[$context['event']] => $object), $options);
  $message['subject'] = $subject;

  $body = t($context['message'], $t_args, array('langcode' => $account->language));
  $body = token_replace($body, array('recipient' => $account, $events[$context['event']] => $object), $options);
  $message['body'][] = nl2br($body);

  if (isset($object->nid)) {
    $message['headers']['X-Checkdesk-ID'] = $object->nid;
  }
  //force new account mail to be HTML
  if ($key == 'email_new_user') {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }

}

/**
 * Implements hook_token_info().
 */
function meedan_notifications_token_info() {
  $info['types']['recipient'] = array(
    'name' => t('Recipient'),
    'description' => t('The recipient of the email notification.'),
    'type' => 'user',
    'needs-data' => 'recipient',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function meedan_notifications_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'recipient' && !empty($data['recipient'])) {
    $replacements += token_generate('user', $tokens, array('user' => $data['recipient']), $options);
  }
  return $replacements;
}

/** 
 * Implements hook_mail_alter().
 * Convert the default email sender from just site_mail to "site_name <site_mail>".
 */
function meedan_notifications_mail_alter(&$message) {
  if ($message['from'] == variable_get('site_mail', '')) {
    $message['from'] = $message['headers']['From'] = variable_get('site_name', '') . ' <' . variable_get('site_mail', '') . '>';
  }
}

/**
 * Gets the last time the user opened the notifications menu.
 */
function meedan_notifications_get_last_time_menu_opened($user) {
  $last = db_query('SELECT timestamp FROM {meedan_notifications_last_opened_menu} WHERE uid = ' . $user->uid)->fetchField();
  $last = $last ? $last : 0;
  return $last;
}

/*
 * Just an alias for `meedan_notifications_action`
 */
function meedan_notifications_get_recipients_for_object($object, $context) {
  return meedan_notifications_action($object, $context);
}

/*
 * Given a user, return a list of objects that are related to him
 */
function meedan_notifications_get_objects_for_recipient($user, $context) {
  $nids = NULL;
  $nids = module_invoke_all('meedan_notifications_objects', $user, $context);
  $nids = array_combine($nids, $nids); // turn into [nid=>nid]
  drupal_alter('meedan_notifications_objects', $nids, $user, $context);
}

/**
 * Implements hook_meedan_notifications_objects().
 * Now this list contains nodes created by the user or nodes on which the user commented.
 */
function meedan_notifications_meedan_notifications_objects($user, $context) {
  $nids = array();
  $query = 'SELECT DISTINCT(n.nid) FROM {node} n
            LEFT JOIN {comment} c
            ON c.nid = n.nid
            WHERE (n.uid = ' . $user->uid . '
            OR c.uid = ' . $user->uid . ')';
  if ($context['since']) $query .= ' AND n.created > ' . $context['since'];
  if ($context['limit']) $query .= ' LIMIT ' . $context['limit'];
  $result = db_query($query);
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  if (!count($nids)) return array(0);
  return $nids;
}

/**
 * Implements hook_meedan_notifications_objects_alter().
 * Used for nothing for the time being.
 */
function meedan_notifications_meedan_notifications_objects_alter(&$nids, $user, $context) {
  // Does nothing
}

/**
 * Get context
 */
function meedan_notifications_context() {
  $since = variable_get('meedan_notifications_since', 0) * 86400;
  if ($since) $since = time() - $since;
  $limit = variable_get('meedan_notifications_list_limit', 0);
  return array('limit' => $limit, 'since' => $since);
}

/**
 * Placeholders to be used on views queries
 */
function meedan_notifications_placeholders_for_views($user) {
  $context = meedan_notifications_context();
  $nids = meedan_notifications_meedan_notifications_objects($user, $context);
  return array(
    ':nids' => implode(',', $nids),
    ':uid' => $user->uid,
  );
}

/**
 * Callback function to update the last time the user saw the notifications.
 */
function meedan_notifications_set_last_time_menu_opened() {
  global $user;
  $uid = intval($user->uid);
  $table = 'meedan_notifications_last_opened_menu';
  $exists = db_query("SELECT uid FROM {$table} WHERE uid = $uid")->fetchField();
  if ($exists == $uid) db_update($table)->fields(array('uid' => $uid, 'timestamp' => time()))->condition('uid', $uid, '=')->execute();
  else db_insert($table)->fields(array('uid' => $uid, 'timestamp' => time()))->execute();
  $timestamp = db_query("SELECT timestamp FROM {$table} WHERE uid = $uid")->fetchField();
  return drupal_json_output(array('timestamp' => $timestamp));
  exit;
}

