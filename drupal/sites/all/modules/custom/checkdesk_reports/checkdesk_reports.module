<?php

/**
 * Implements hook_menu().
 */
function checkdesk_reports_menu() {
    $items = array();
    $items['node/%checkdesk_report/checkdesk/suggest'] = array(
        'title' => 'Add report to story',
        'title callback' => '_checkdesk_reports_suggest_title',
        'title arguments' => array(1),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('_checkdesk_reports_suggest_report', 1),
        'access callback' => '_checkdesk_reports_can_suggest',
        'access arguments' => array(1),
        'file' => 'checkdesk.report_suggest.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    $items['node/%checkdesk_report/checkdesk/modal/suggest/%ctools_js'] = array(
        'title' => 'Add report to story',
        'title callback' => '_checkdesk_reports_suggest_title',
        'title arguments' => array(1),
        'page callback' => '_checkdesk_reports_suggest_report_modal',
        'page arguments' => array(1, 5),
        'access callback' => '_checkdesk_reports_can_suggest',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
        'file' => 'checkdesk.report_suggest.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    $items['node/flag/confirm/%/%flag/%/%ctools_js'] = array(
        'title' => 'Confirm',
        'page callback' => '_checkdesk_core_flags_confirm_modal',
        'page arguments' => array(3, 4, 5, 6),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'checkdesk.report_flag.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    $items['checkdesk/reports'] = array(
        'title' => 'Reports',
        'page callback' => '_checkdesk_goto_search',
        'page arguments' => array('reports'),
        'access arguments' => array('access content'),
    );
    $items['reports-export/%'] = array(
        'title' => 'Export reports as CSV',
        'page callback' => '_checkdesk_reports_export',
        'page arguments' => array(1),
        'access arguments' => array('export reports'),
        'file' => 'checkdesk.reports.export.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    $items['checkdesk/media-preview'] = array(
        'page callback' => '_checkdesk_reports_media_preview_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'checkdesk.media_preview.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    $items['checkdesk/media-widget/%'] = array(
        'page callback' => '_checkdesk_media_widget_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'checkdesk.media_preview.inc',
        'file path' => drupal_get_path('module', 'checkdesk_reports') . '/includes',
    );
    return $items;
}

/**
 * Load function for reports.
 */
function checkdesk_report_load($nid) {
    $report = node_load($nid);
    if ($report && $report->type === 'media') {
        return $report;
    }
    return FALSE;
}

/**
 * Implements hook_permission().
 */
function checkdesk_reports_permission() {
    return array(
        'add report to story' => array(
            'title' => t('Add report to story'),
            'description' => t('User can add a report to a story. Otherwise, only allowed to suggest the addition.'),
        ),
        'change report status' => array(
            'title' => t('Change report status'),
            'description' => t('User can change report status.'),
        ),
        'export reports' => array(
            'title' => t('Export reports'),
            'description' => t('User can export reports.'),
        ),
        'access graphic journalist flag' => array(
            'title' => t('Access graphic journalist flag'),
            'description' => t('User can access graphic journalist flag.'),
        ),
    );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function checkdesk_reports_form_media_node_form_alter(&$form, &$form_state) {
    global $user;
    drupal_set_title(t('Submit report'));
    // Adjust edit node form
    $form['#attributes']['class'][] = 'cd-report-duplicates';
    $form['field_link'][LANGUAGE_NONE][0]['#title'] = t('URL');
    $form['field_link'][LANGUAGE_NONE][0]['#description'] = t('When you submit a report it becomes available for fact-checking and may be included in a blog post by our team.');
    $form['field_tags'][LANGUAGE_NONE]['#attributes']['placeholder'] = t('Add tags');
    // Change field attributes
    $form['body'][LANGUAGE_NONE][0]['#attributes'] = array('placeholder' => t('Add more info or write a description. What\'s the context? Does this link need to be fact-checked? What evidence do you have?'), 'rows' => 3);
    // Description textarea should not be resizable
    $form['body'][LANGUAGE_NONE][0]['#resizable'] = FALSE;
    // Check for graphic content
    $flag = user_access('access graphic journalist flag') ? 'graphic_journalist' : 'graphic';
    $form['graphic_content'] = array(
        '#type' => 'checkboxes',
        '#options' => array($flag => t('Graphic content')),
        '#weight' => 99,
    );
    $form['report_preview'] = array(
        '#markup' => '<div id="meedan_bookmarklet_preview"><div id="meedan_bookmarklet_preview_gc" style="display: none;"><span>' . t('This report contains graphic content') . '</span>' . l(t('Click to show'), 'javascript:;', array('absolute' => TRUE, 'external' => TRUE)) . '</div><div id="meedan_bookmarklet_preview_content">' . (isset($preview['preview']) ? $preview['preview'] : '') . '</div></div>',
    );
    // Fields order
    $form['field_link']['#weight'] = -2;
    $form['report_preview']['#weight'] = 0;

    // Load JavaScript for the form
    $form['#after_build'] = array('_checkdesk_reports_load_javascript_for_report_form');
    // Two buttons: submit and cancel
    $form['actions']['submit']['#value'] = t('Submit');
    $form['actions']['draft']['#access'] = FALSE;

    $options = array('_none' => t('- None -')) + _checkdesk_get_stories_by_activity(TRUE);
    $default_story = 0;
    if (!isset($form['nid']['#value'])) {
        // Hide fields on form creation
        foreach (variable_get('meedan_bookmarklet_hidden_fields', array('title', 'field_rating')) as $field) {
            $form[$field]['#access'] = FALSE;
        }
        //hide description and graphic content
        $form['#attached']['js'][] = array(
            'data' => 'jQuery(function() { jQuery("#edit-body, #edit-graphic-content, #edit-field-stories, #edit-field-tags, #checkdesk-group-metadata").hide();});',
            'type' => 'inline',
        );
        //set default url if exist.
        if (isset($_GET['url'])) {
            $form['field_link'][LANGUAGE_NONE][0]['#default_value']['url'] = $_GET['url'];
        }
        //set default story if exist.
        if (isset($_GET['ref_nid']) && is_numeric($_GET['ref_nid']) && $_GET['ref_nid']) {
            $default_story = $_GET['ref_nid'];
        }
    }
    else {
        $node = $form['#node'];
        drupal_set_title(t('Edit @type <em>@title</em>', array('@type' => t('Report'), '@title' => $node->title)), PASS_THROUGH);
            if (isset($node->field_stories[LANGUAGE_NONE][0]['target_id'])) {
            $default_story = $node->field_stories[LANGUAGE_NONE][0]['target_id'];
        }
    }

    if ($default_story && isset($form['field_stories'][LANGUAGE_NONE]['#options'][$default_story])) {
        $options[$default_story] = $form['field_stories'][LANGUAGE_NONE]['#options'][$default_story];
        $form['field_stories'][LANGUAGE_NONE]['#default_value'] = array($default_story);
    }
    // Update stories options
    $form['field_stories'][LANGUAGE_NONE]['#options'] = $options;
    // Handle HTML entities
    foreach ($form['field_stories'][LANGUAGE_NONE]['#options'] as &$option) {
        $option = decode_entities($option);
    }

    // Redirect user to collaboration page.
    $form['actions']['submit']['#submit'][] = '_checkdesk_reports_redirect';
    // Hide comment settings
    $form['comment_settings']['#access'] = usesr_access('access additional settings');


    if($form['field_stories']) {
        _checkdesk_add_chosen_components();
    }
    // Add CSS file for autocomplete field
    if($form['field_tags']) {
        drupal_add_css(
            drupal_get_path('theme', 'checkdesk') . '/assets/css/replace_drupal/autocomplete.css',
            array(
                'scope' => 'footer',
                'group' => CSS_THEME,
                'weight' => '9991',
                'every_page' => FALSE,
            )
        );
    }

    // Add extra css for metadata fields
    $metadata_fields = checkdesk_reports_metadata_fields();
    if (count($metadata_fields)) {
        $metadata_fields_adjust = array();
        // Add css for metadata fields (geolocation and date popup)
        foreach ($metadata_fields as $metadata_field_name) {
            $metadata_field = field_info_field($metadata_field_name);
            if($metadata_field['type'] == 'geolocation_latlng') {
                $metadata_fields_adjust['geolocation'] = $metadata_field['field_name'];
                //$field_location_name = $metadata_field['field_name'];
                //break;
            }
            elseif (in_array($metadata_field['type'], array('date', 'datetime', 'datestamp'))) {
                $metadata_fields_adjust['date'] = $metadata_field['field_name'];
            }
        }
        if (count($metadata_fields_adjust)) {
            _checkdesk_reports_adjust_metadata_display($metadata_fields_adjust, $form);
        }
    }

}

/*
 * Load JavaScript file for bookmarklet form
 */
function _checkdesk_reports_load_javascript_for_report_form($form, &$form_state) {
    //add placeholder to link field
    $form['field_link'][LANGUAGE_NONE][0]['url']['#attributes']['placeholder'] = t('Add a link');
    drupal_add_js(drupal_get_path('module', 'checkdesk_reports') . '/js/checkdesk_report_form.js');
    return $form;
}

/**
 * Add CSS file for geolocation google maps and date_popup
 */
function _checkdesk_reports_adjust_metadata_display($fields, &$form) {
    // Adjust classes for the buttons inside google maps field widget
    if (isset($fields['geolocation'])) {
        $field_location_name = $fields['geolocation'];
        $form[$field_location_name][LANGUAGE_NONE][0]['address']['geocode']['#prefix'] = '<div class="btn btn-primary-alt btn-sm geolocation-get-location">' . $form[$field_location_name][LANGUAGE_NONE][0]['address']['geocode']['#prefix'];
        $form[$field_location_name][LANGUAGE_NONE][0]['address']['geocode']['#suffix'] = $form[$field_location_name][LANGUAGE_NONE][0]['address']['geocode']['#suffix'] . '</div>';

        $form[$field_location_name][LANGUAGE_NONE][0]['googlemap']['#prefix'] = '<div class="geolocation-selection-wrapper">' . $form[$field_location_name][LANGUAGE_NONE][0]['googlemap']['#prefix'];

        $form[$field_location_name][LANGUAGE_NONE][0]['latitem']['#prefix'] = '<div class="geolocation-values-wrapper"><div class="geolocation-selection">' . $form[$field_location_name][LANGUAGE_NONE][0]['latitem']['#prefix'];
        $form[$field_location_name][LANGUAGE_NONE][0]['lngitem']['#suffix'] = $form[$field_location_name][LANGUAGE_NONE][0]['lngitem']['#suffix'] . '</div>';

        $form[$field_location_name][LANGUAGE_NONE][0]['remove']['#prefix'] = '<div class="btn btn-primary-alt btn-sm geolocation-selection-remove-button">' . $form[$field_location_name][LANGUAGE_NONE][0]['remove']['#prefix'];
        $form[$field_location_name][LANGUAGE_NONE][0]['remove']['#suffix'] = $form[$field_location_name][LANGUAGE_NONE][0]['remove']['#suffix'] . '</div></div></div>';
        drupal_add_css(
            drupal_get_path('theme', 'checkdesk') . '/assets/css/replace_drupal/geolocation_googlemaps.css',
            array(
                'scope' => 'footer',
                'group' => CSS_THEME,
                'weight' => '9993',
                'every_page' => FALSE,
            )
        );
    }

    // Add CSS file for date popup field when module is enabled
    if (isset($fields['date'])) {
        drupal_add_css(
            drupal_get_path('theme', 'checkdesk') . '/assets/css/replace_drupal/datepicker.css',
            array(
                'scope' => 'footer',
                'group' => CSS_THEME,
                'weight' => '9992',
                'every_page' => FALSE,
            )
        );
    }
}

/**
 * Implements hook_theme().
 */
function checkdesk_reports_theme() {
    $themes = array();
    $base = array(
        'file' => 'theme.inc',
        'path' => drupal_get_path('module', 'checkdesk_reports') . '/theme',
    );
    $themes['checkdesk_core_report_source'] = array(
            'template' => 'report_source',
            'variables' => array(
                'report' => NULL,
            ),
        ) + $base;

    $themes['checkdesk_core_update_reports'] = array(
            'template' => 'update_reports',
            'variables' => array(
                'reports' => NULL,
            ),
        ) + $base;

    $themes['checkdesk_reports_report_activity'] = array(
            'template' => 'report_activity',
            'variables' => array(
                'node' => NULL,
                'content' => NULL,
                'view_mode' => NULL,
            ),
        ) + $base;

    $themes['checkdesk_reports_report_activity_status'] = array(
            'template' => 'report_activity_status',
            'variables' => array(
                'heartbeat_activity' => NULL,
            ),
        ) + $base;

    $themes['checkdesk_reports_report_activity_count'] = array(
            'template' => 'report_activity_count',
            'variables' => array(
                'count' => NULL,
                'nid' => NULL,
                'link_count' => NULL,
            ),
        ) + $base;

    $themes['checkdesk_reports_report_activity_stream'] = array(
            'template' => 'report_activity_stream',
            'variables' => array(
                'activity' => NULL,
                'nid' => NULL,
            ),
        ) + $base;
    $themes['checkdesk_reports_metadata_fields'] = array(
            'template' => 'checkdesk_metadata_fields',
            'variables' => array(
                'node' => NULL,
            ),
        ) + $base;

    return $themes;
}

/**
 * Implements hook_node_view().
 */
function checkdesk_reports_node_view($node, $view_mode, $langcode) {

    // Add decorations to report nodes.
    if ($node->type == 'media') {

        $node->content['report_source'] = array(
            '#theme' => 'checkdesk_core_report_source',
            '#report' => $node,
        );

        if ($view_mode == 'full') {
            $node->content['metadata_fields'] = theme('checkdesk_reports_metadata_fields', array('node' => $node));
        }
        elseif ($view_mode == 'checkdesk_collaborate' || $view_mode == 'checkdesk_search') {
            $node->content['comments'] = comment_node_page_additions($node);
            $heartbeat_row = isset($node->heartbeat_row) ? $node->heartbeat_row : '';
            if ($heartbeat_row) {
                $heartbeat_row = $node->heartbeat_row;
                // Load activity status with verification footnote
                if ($heartbeat_row->heartbeat_activity_message_id == 'status_report') {
                    $heartbeat_activity = heartbeat_activity_load($heartbeat_row->uaid);
                    $node->content['report_activity_status'] = array(
                        '#theme' => 'checkdesk_reports_report_activity_status',
                        '#heartbeat_activity' => $heartbeat_activity,
                    );
                }
                // Load verification footnote
                if ($heartbeat_row->heartbeat_activity_message_id == 'checkdesk_comment_on_report') {
                    $heartbeat_activity = heartbeat_activity_load($heartbeat_row->uaid);
                    $footnote = comment_load($heartbeat_activity->cid);
                    $node->content['report_verification_footnote'] = isset($footnote->comment_body[LANGUAGE_NONE][0]['value']) ? $footnote->comment_body[LANGUAGE_NONE][0]['value'] : '';
                }
            }
            $node->content['field_link'] = _checkdesk_reports_render_activity_type($node, $heartbeat_row);

        }
    }
}

function _checkdesk_reports_render_activity_type($node, $heartbeat_row) {
    // TODO: get this mapping from admin interface.
    // for now will use mapping array with key = activity type and value = formatter name.
    $mapping = array(
        'checkdesk_report_suggested_to_story' => 'meedan_inline_full_mode',
    );

    if ($heartbeat_row && isset($mapping[$heartbeat_row->heartbeat_activity_message_id])) {
        $output = field_view_field('node', $node, 'field_link', array('type' => $mapping[$heartbeat_row->heartbeat_activity_message_id]));
    }
    else {
        $output = field_view_field('node', $node, 'field_link', array('type' => 'meedan_inline_thumbnail'));
    }
    return $output;
}

define('RATING_NOT_APPLICABLE', 'Not Applicable');
define('RATING_UNDETERMINED', 'Undetermined');

/**
 * Implements hook_form_FORM_ID_alter() for `comment_node_media_form`.
 */
function checkdesk_reports_form_comment_node_media_form_alter(&$form, $form_state, $form_id) {
    $term = isset($form['#node']->field_rating[LANGUAGE_NONE][0]['taxonomy_term']) ?
        $form['#node']->field_rating[LANGUAGE_NONE][0]['taxonomy_term'] :
        taxonomy_term_load($form['#node']->field_rating[LANGUAGE_NONE][0]['tid']);
    if (in_array($term->name, array(RATING_NOT_APPLICABLE, RATING_UNDETERMINED))) {
        $form['#access'] = FALSE;
    }
    else {
        // Adjust node comments form
        $nid = $form['#node']->nid;
        $form['author']['homepage'] = NULL;
        $form['author']['mail'] = NULL;
        $form['actions']['submit']['#attributes']['class'] = array('btn');
        $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['rows'] = 1;
        $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['class'] = array('expanding');
        $form['actions']['submit']['#value'] = t('Add footnote');
        $form['actions']['submit']['#ajax'] = array(
            'callback' => '_checkdesk_reports_comment_form_submit',
            'wrapper' => 'node-' . $nid,
            'method' => 'replace',
            'effect' => 'fade',
        );
        $form_state['ctools comment alter'] = FALSE;

        $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['placeholder'] = t('Add footnote');
        $form['field_rating'][LANGUAGE_NONE]['#default_value'] = $term->name;

        $form['field_rating'][LANGUAGE_NONE]['#prefix'] = '<div class="report-activity-edit-status"><span class="current-status ' . preg_replace('/\s+/', '-', trim(strtolower($term->name))) . '">' . t($term->name) . '</span>';
        $form['field_rating'][LANGUAGE_NONE]['#suffix'] = '</div>';
        $form['field_rating'][LANGUAGE_NONE]['#title'] = t('Edit Status');
        $form['field_rating'][LANGUAGE_NONE]['#description'] = t('Pick the appropriate verification status');

        // Options
        $options = array();
        foreach ($form['field_rating'][LANGUAGE_NONE]['#options'] as $tid => $name) {
            if ($tid !== '_none') {
                $term = taxonomy_term_load($tid);
                $icon = _checkdesk_report_status_icon($term);
                $options[$term->name] = $icon . t($term->name);
            }
        }
        $form['field_rating'][LANGUAGE_NONE]['#options'] = array_reverse($options);
        $form['#validate'] = array('_checkdesk_reports_comment_form_validate');
    }
}

/**
 * Validate comment via ajax.
 */
function _checkdesk_reports_comment_form_validate($form, &$form_state) {

  // Get tid from name
  if (isset($form_state['values']['field_rating'])) {
    $tids = array_keys(taxonomy_get_term_by_name($form_state['values']['field_rating'][LANGUAGE_NONE][0]['tid']));
    $form_state['values']['field_rating'][LANGUAGE_NONE][0]['tid'] = $tids[0];
  }

}

/**
 * Submit comment via ajax.
 */
function _checkdesk_reports_comment_form_submit($form, &$form_state) {
    global $user;

    drupal_get_messages();

    $nid = $form['#node']->nid;
    $node = node_load($nid);

    $commands = array();
    // Change report status
    if (user_access('change report status')) {
        $node->field_rating[LANGUAGE_NONE][0]['tid'] = $form_state['values']['field_rating'][LANGUAGE_NONE][0]['tid'];
        node_save($node);
        // Update report status on report display
        $report_status = _checkdesk_report_status($node);
        $commands[] = ajax_command_replace('.media-status-report-' . $node->nid, $report_status['status']);
    }
    //TODO use theme function instead of writing HTML
    $output = _checkdesk_reports_render_footnotes($node);
    $commands[] = ajax_command_invoke(NULL, 'footnoteCallback', array($nid, $output));

    return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Render footnote HTML for footnote ajax submit
 * @param object $node
 * @return HTML
 */
function _checkdesk_reports_render_footnotes($node) {
    $node_view = node_view($node);
    $activity_report = checkdesk_reports_load_activity($node->nid);
    if ($activity_report['total_rows']) {
        $media_activity_report_count = $activity_report['total_rows'];
        $media_activity_report = $activity_report['view_output'];
    }
    $html = '<div id="report-activity-node-' . $node->nid . '" class="item-nested-content-wrapper open">';
    $html .= '<div class="activity-item-controls item-controls">';
    $html .= '    <div class="meta">';
    $html .= $media_activity_report_count . ' '. t('verification footnotes');
    $html .= '</div>';
    $html .= '<div class="actions" role="toolbar">';
    $html .= render($node_view['links']);
    $html .= '</div>';
    $html .= '</div>';
    $html .= ' <div class="activity nested item-nested-content open" style="display: block;">';
    $html .= $media_activity_report;
    $html .= '  </div>';
    $html .= '  </div>';
    return $html;
}

/*
 * Implements hook_node_insert().
 *
 * Set flag for report from bookmarklet.
 */
function checkdesk_reports_node_insert($node) {
    if (isset($node->graphic_content) && is_array($node->graphic_content)) {
        foreach($node->graphic_content as $flag_name => $checked) {
            if ($checked) {
                $flag = flag_get_flag($flag_name);
                $flag->flag('flag', $node->nid);
            }
        }
    }
}

/**
 * Implements hook_node_delete().
 */
function checkdesk_reports_node_delete($node) {
  if ($node->type == 'media') {
        db_delete('checkdesk_reports_updates')
            ->condition('report_nid', $node->nid)
            ->execute();
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function checkdesk_reports_field_formatter_info() {
  return array(
    'geolocation_latlng' => array(
      'label' => t('Latitude, longitude text-based formatter'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function checkdesk_reports_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    case 'geolocation_latlng':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p>' . t('@lat, @lng', array('@lat' => $item['lat'], '@lng' => $item['lng'])) . '</p>';
      }
      break;
  }
  return $element;
}

/**
 * Redirect user to collaboration page.
 */
function _checkdesk_reports_redirect($form, &$form_state) {
    $values = $form_state['values'];
    if (!empty($values['field_stories'][LANGUAGE_NONE][0]['target_id'])) {
        $form_state['redirect'] = 'node/' . $values['field_stories'][LANGUAGE_NONE][0]['target_id'] . '/collaboration';
    }
}

/**
 * Get status of a report
 */
function _checkdesk_report_status($report) {
    global $language;
    $report_status = array();

    $term = isset($report->field_rating[LANGUAGE_NONE][0]['taxonomy_term']) ?
        $report->field_rating[LANGUAGE_NONE][0]['taxonomy_term'] :
        taxonomy_term_load($report->field_rating[LANGUAGE_NONE][0]['tid']);
    $status_name = $term->name;
    $status_class = empty($status_name) ? '' : strtolower(str_replace(' ', '-', $status_name));;
    $icon = _checkdesk_report_status_icon($term);
    $report_status['status'] = $icon . '<span class="status-name ' . $status_class . '">' . t($status_name) . '</span>';
    if($status_name != 'In Progress') {
        $partner = i18n_variable_get('checkdesk_site_owner', $language->language) ?
            i18n_variable_get('checkdesk_site_owner', $language->language) : i18n_variable_get('checkdesk_site_owner', 'en');
        $status_by = t('by <span class="checkdesk-status-partner">@partner</span>',
            array('@partner' => $partner));
    }
    // display status with an icon and "x by partner"
    if(isset($status_name) && isset($icon) && isset($status_by)) {
        $report_status['status'] = $icon . '<span class="status-name ' . $status_class . '">' . t($status_name) . '</span>&nbsp;<span class="status-by">' . $status_by . '</span>';
    } else { // display status with an icon only
        $report_status['status'] = $icon . '<span class="status-name ' . $status_class . '">' . t($status_name) . '</span>';
    }
    $report_status['status'] = '<span class="media-status-report-'. $report->nid .'">' . $report_status['status'] .'</span>';
    return $report_status;
}

/**
 * @param $report
 * @return string
 */
function _checkdesk_report_status_icon($term) {
    $icon_class = '';
    $status_name = $term->name;
    // Set status icon
    if (isset($term->field_status_icon[LANGUAGE_NONE][0]['uri'])) {
        $icon = '<span class="checkdesk-status-icon"><img src="'. image_style_url('status_icon', $term->field_status_icon[LANGUAGE_NONE][0]['uri']) .'"></span>';
    }
    else {
        if ($status_name == 'Verified') {
            $icon_class = 'icon-check-circle';
        } elseif ($status_name == 'In Progress') {
            $icon_class = 'icon-random';
        } elseif ($status_name == 'Undetermined') {
            $icon_class = 'icon-question-circle';
        } elseif ($status_name == 'False') {
            $icon_class = 'icon-times-circle';
        }
        $icon = empty($icon_class) ? '' : '<span class="' . $icon_class . '"></span> ';
    }
    return $icon;
}

/**
 * Load report activities based on issue #4287
 */
function checkdesk_reports_load_activity($nid) {
    $view = views_get_view('activity_report');
    $view->set_arguments(array($nid));
    $view->get_total_rows = TRUE;
    $view->display['default']->display_options['pager']['options']['items_per_page'] = variable_get('checkdesk_comments_first_limit', 20);
    $view_output = $view->preview('block');
    $view->destroy();
    $total_rows = $view->total_rows;
    if ($total_rows <= variable_get('checkdesk_comments_all_limit', 30)) {
        $view->display['default']->display_options['pager']['options']['items_per_page'] = variable_get('checkdesk_comments_all_limit', 30);
        $view_output = $view->preview('block');
        $view->destroy();
    }
    return array(
        'view_output' => $view_output,
        'total_rows' => $total_rows,
    );
}

/**
 * Access function for
 */
function _checkdesk_reports_can_suggest($report) {
    global $user;
    return user_access('add report to story');
}

/**
 * Helper function to return metadata group fields.
 */
function checkdesk_reports_metadata_fields() {
    return variable_get('checkdesk_metadata_fields', array());
}

/**
 * @param bool $show_draft
 * @return array
 *  List of stories sorted by activity.
 */
function _checkdesk_get_stories_by_activity($show_draft = FALSE) {
    global $language;
    $query = db_select('heartbeat_activity', 'ha')->distinct();
    $query->fields('n', array('nid', 'title'));
    $query->join('node', 'n', 'n.nid = ha.nid_target');
    $query->condition('n.type', 'discussion');
    $query->condition('n.language', $language->language);
    if ($show_draft) {
        if (!user_access('access any drafts content')) {
            global $user;
            $db_or = db_or();
            $db_and = db_and();
            $db_and->condition('n.status', 0);
            $db_and->condition('n.uid', $user->uid);
            $db_or->condition('n.status', 1);
            $db_or->condition($db_and);
            $query->condition($db_or);
        }
    }
    $query->range(0, 50);
    $query->orderBy('ha.timestamp', 'DESC');
    $result = $query->execute()->fetchAllKeyed(0);
    return $result;
}