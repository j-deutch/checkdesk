<?php

/**
 * Implements hook_heartbeat_activity_view().
 * Change some data on heartbeat activity display 
 */
function checkdesk_notifications_heartbeat_activity_view(HeartbeatActivity $heartbeatActivity, $view_mode = 'full', $language = NULL) {
  unset($heartbeatActivity->content['username']);
  unset($heartbeatActivity->content['buttons']);
  $actor = user_load($heartbeatActivity->actor->uid);
  $avatar = ($actor && $actor->picture && !empty($actor->picture->uri) ? theme('image_style', array('style_name' => 'notifications_avatar', 'path' => $actor->picture->uri, 'attributes' => array('class' => 'avatar'))) : '');
  $heartbeatActivity->content['avatar'] = array(
    '#markup' => $avatar,
  );
}

/**
 * Gets number of new notifications.
 */
function checkdesk_notifications_number_of_new_items($user) {

  // Execute view query
  $view = views_get_view('my_notifications');
  $view->set_display('block');
  $view->build();

  // Prepare placeholders
  $params = meedan_notifications_placeholders_for_views($user);
  unset($params[':nids']);

  // Add a last condition - only activities after last login
  $last = meedan_notifications_get_last_time_menu_opened($user);
  $view->build_info['query'] = str_replace('GROUP', 'AND heartbeat_activity.timestamp > ' . $last . ' GROUP', $view->build_info['query']);

  return db_query($view->build_info['query'], $params)->rowCount();
}

/**
 * Load JavaScript file for notifications list 
 */
function checkdesk_notifications_load_js() {
  drupal_add_js(drupal_get_path('module', 'checkdesk_notifications') . '/js/notifications_menu.js');
}

/**
 * Implements hook_image_default_styles().
 * Add dimensions for avatars in notifications list
 */
function checkdesk_notifications_image_default_styles() {
  $styles = array();

  $styles['notifications_avatar'] = array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array('width' => 20, 'height' => 20, 'upscale' => 1),
          'weight' => 0,
          ),   
        )    
      );

  return $styles;
}

/**
 * Implements hook_views_api().
 */
function checkdesk_notifications_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'checkdesk_notifications'),
  );
}

/**
 * Implements hook_meedan_notifications_events_alter().
 */
function checkdesk_notifications_meedan_notifications_events_alter(&$events) {
  global $user;
  $events = array();
  // We need events for both site and e-mail notifications
  foreach (array('site' => t('On site: '), 'email' => t('By e-mail: ')) as $context => $label) {
    if (in_array('journalist', $user->roles) || in_array('administrator', $user->roles) || $user->uid == 0) {
      $events[$context . '_report_flagged'] = array(
        'label' => $label . t('Report flagged'),
        'token type' => 'node',
      );
      /*
      $events[$context . '_report_suggested'] = array(
        'label' => $label . t('Report suggested to story'),
        'token type' => 'node',
      );
       */
      $events[$context . '_comment_on_update'] = array(
        'label' => $label . t('Comment on update'),
        'token type' => 'node',
      );
      $events[$context . '_new_user'] = array(
        'label' => $label . t('New user'),
        'token type' => 'node',
      );
      $events[$context . '_fact_checking_set_by_citizen'] = array(
        'label' => $label . t('Fact-checking set on a report by citizen journalist'),
        'token type' => 'node',
      );
    }
    if (!in_array('journalist', $user->roles) || in_array('administrator', $user->roles) || $user->uid == 0) {
      $events[$context . '_update_on_story_i_commented_on_update'] = array(
        'label' => $label . t('New update on a story I commented on an update before'),
        'token type' => 'node',
      );
      $events[$context . '_report_published_in_update'] = array(
        'label' => $label . t('Report I submitted is published in an update'),
        'token type' => 'node',
      );
    }
    $events[$context . '_comment_on_report'] = array(
      'label' => $label . t('Comment on report'),
      'token type' => 'node',
    );
    $events[$context . '_reply_to_comment'] = array(
      'label' => $label . t('Replies to my comments'),
      'token type' => 'node',
    );
    $events[$context . '_fact_checking_on'] = array(
      'label' => $label . t('Fact-checking turned on on a report I submitted'),
      'token type' => 'node',
    );
    $events[$context . '_fact_checking_set'] = array(
      'label' => $label . t('Fact-checking set on a report I submitted'),
      'token type' => 'node',
    );
    $events[$context . '_fact_status_changed_for_commenter'] = array(
      'label' => $label . t('Fact-checking set on a report I added footnote to'),
      'token type' => 'node',
    );
    $events[$context . '_update_on_story_i_followed'] = array(
      'label' => $label . t('New update on a story I followed'),
      'token type' => 'node',
    );
    $events[$context . '_report_on_story_i_followed'] = array(
      'label' => $label . t('New report on a story I followed'),
      'token type' => 'node',
    );
    $events[$context . '_report_status_on_story_i_followed'] = array(
      'label' => $label . t('Change report status on a story I followed'),
      'token type' => 'node',
    );
  }
}

/**
 * Returns events
 */
function checkdesk_notifications_get_events() {
  $events = array();
  checkdesk_notifications_meedan_notifications_events_alter($events);
  return $events;
}

/**
 * Implements hook_views_query_alter().
 */
function checkdesk_notifications_views_query_alter(&$view, &$query) {

  if ($view->name == 'my_notifications') {

    // Add relationships to query
    global $user;
    $events = array_keys(checkdesk_notifications_get_events());
    $subscriptions = isset($user->data['meedan_notifications']) ? 
      $user->data['meedan_notifications'] : array();
    $subscriptions += array_combine($events, $events);
    $params = meedan_notifications_placeholders_for_views($user);
    unset($params[':nids']);
    $join = new views_join;
    $join->construct('node', 'heartbeat_activity', 'nid', 'nid');
    $query->add_relationship('n', $join, 'node');
    $join = new views_join;
    $join->construct('comment', 'heartbeat_activity', 'nid', 'cid');
    $query->add_relationship('c', $join, 'comment');
    $join = new views_join;
    $join->construct('comment', 'n', 'nid', 'nid');
    $query->add_relationship('c2', $join, 'comment');
    $query->set_where_group('OR', 1);

    // Activities for journalists only
    if (in_array('journalist', $user->roles)) {
      if ($subscriptions['site_report_flagged']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_flag_report'");
      }
      /*
      if ($subscriptions['site_report_suggested']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_report_suggested_to_story'");
      }
       */
      if ($subscriptions['site_comment_on_report']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_comment_on_report'");
      }
      if ($subscriptions['site_comment_on_update']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_comment_on_update' AND n.uid = :uid", array(':uid' => $params[':uid']));
      }
      if ($subscriptions['site_new_user']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_new_user'");
      }
      if ($subscriptions['site_fact_checking_set_by_citizen']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_fact_checking_on_by_citizen'");
      }
    }

    // Activities for a normal user
    else {
      if ($subscriptions['site_update_on_story_i_commented_on_update']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_new_update_on_story_i_commented_on_update' AND heartbeat_activity.nid_target IN (SELECT field_desk_target_id FROM field_data_field_desk f INNER JOIN comment c ON c.nid = f.entity_id WHERE entity_type = 'node' AND bundle = 'post' AND c.uid = :uid AND c.created < heartbeat_activity.timestamp)", array(':uid' => $params[':uid']));
      }
      if ($subscriptions['site_report_published_in_update']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_report_published_in_update' AND heartbeat_activity.uid_target = :uid", array(':uid' => $params[':uid']));
      }
      if ($subscriptions['site_comment_on_report']) {
        $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_comment_on_report' AND c2.uid = :uid AND heartbeat_activity.timestamp > c2.created", array(':uid' => $params[':uid']));
      }
    }

    // Activities for any user

    // Collect followed stories by current user.
    $followed_stories = _checkdesk_followed_stories();

    if ($subscriptions['site_reply_to_comment']) {
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_reply_to_comment' AND c.uid = :uid", array(':uid' => $params[':uid']));
    }
    if ($subscriptions['site_fact_checking_on']) {
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_fact_checking_on' AND n.uid = :uid", array(':uid' => $params[':uid']));
    }
    if ($subscriptions['site_fact_checking_set']) {
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_fact_checking_set' AND n.uid = :uid", array(':uid' => $params[':uid']));
    }
    if ($subscriptions['site_fact_status_changed_for_commenter']) {
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_fact_status_changed_for_commenter' AND c2.uid = :uid AND heartbeat_activity.timestamp > c2.created", array(':uid' => $params[':uid']));
    }
    if ($subscriptions['site_update_on_story_i_followed'] && count($followed_stories)) {
      $target_stories = implode(',', $followed_stories);
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_new_update_on_story_i_commented_on_update'
      AND heartbeat_activity.nid_target IN ($target_stories)");
    }
    if ($subscriptions['site_report_on_story_i_followed'] && count($followed_stories)) {
      $target_stories = implode(',', $followed_stories);
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'checkdesk_report_suggested_to_story'
      AND heartbeat_activity.nid_target IN ($target_stories)");
    }
    if ($subscriptions['site_report_status_on_story_i_followed']&& count($followed_stories)) {
      $target_stories = implode(',', $followed_stories);
      $query->add_where_expression(1, "heartbeat_activity.message_id = 'status_report'
      AND heartbeat_activity.nid_target IN ($target_stories)");
    }

    $query->add_where_expression(1, "FALSE");

    // Just show activities that happened after the user has been created
    $query->add_where_expression(0, "heartbeat_activity.timestamp > $user->created");

    // Ignore activities from this user
    $query->add_where_expression(0, "heartbeat_activity.uid != :uid", array(':uid' => $params[':uid']));

    // Remove duplicates
    $query->add_field('heartbeat_activity', 'uaid', 'uaid', array('function' => 'groupby'));
    $query->add_groupby('heartbeat_activity.uaid');
  } 
}

/**
 * Implements hook_meedan_notifications_recipients().
 * Used to populate recipient list.
 */
function checkdesk_notifications_meedan_notifications_recipients($object, $context) {
  $uids = array();
  $roles = array_flip(user_roles(TRUE));
  $journalist_role_id = $roles['journalist'];
  $citizen_role_id = $roles['citizen journalist'];
  switch ($context['event']) {
    case 'email_report_flagged':
    //case 'email_report_suggested':
    case 'email_new_user':
    case 'email_fact_checking_set_by_citizen':
      $uids = db_query("SELECT DISTINCT(uid) FROM {users_roles} WHERE rid = $journalist_role_id")->fetchCol(); // all journalists
      break;
    case 'email_comment_on_update':
      $uids = db_query("SELECT DISTINCT(n.uid) FROM {comment} c INNER JOIN {node} n ON n.nid = c.nid INNER JOIN {users_roles} ur ON ur.uid = n.uid WHERE c.cid = $object->cid AND rid = $journalist_role_id")->fetchCol();
      break;
    case 'email_reply_to_comment':
      $uids = db_query("SELECT DISTINCT(c2.uid) FROM {comment} c1 INNER JOIN {comment} c2 ON c1.pid = c2.cid WHERE c1.cid = $object->cid")->fetchCol();
      break;
    case 'email_fact_checking_on':
      $uids = db_query("SELECT uid FROM {node} WHERE nid = $object->nid")->fetchCol();
      break;
    case 'email_fact_checking_set':
      $uids = db_query("SELECT uid FROM {node} WHERE nid = $object->nid")->fetchCol();
      break;
    case 'email_fact_status_changed_for_commenter':
      $uids = db_query("SELECT DISTINCT(c.uid) FROM {comment} c INNER JOIN {node} n ON c.nid = n.nid WHERE n.nid = $object->nid")->fetchCol();
      break;
    case 'email_update_on_story_i_commented_on_update':
      $uids = db_query("SELECT DISTINCT(c.uid) FROM {field_data_field_desk} f INNER JOIN {comment} c ON c.nid = f.entity_id LEFT JOIN {users_roles} ur ON ur.uid = c.uid WHERE f.entity_type = 'node' AND f.bundle = 'post' AND f.field_desk_target_id = $object->nid AND ur.rid = $citizen_role_id")->fetchCol(); 
      break;
    case 'email_report_published_in_update':
      $uids = db_query("SELECT n.uid FROM {node} n LEFT JOIN {users_roles} ur ON ur.uid = n.uid WHERE n.nid = $object->nid AND ur.rid = $citizen_role_id")->fetchCol();
      break;
    case 'email_comment_on_report':
      $uids = db_query("(SELECT DISTINCT(uid) FROM {users_roles} WHERE rid = $journalist_role_id) UNION (SELECT DISTINCT(c.uid) FROM {comment} c INNER JOIN {node} n ON c.nid = n.nid LEFT JOIN {users_roles} ur ON ur.uid = c.uid WHERE ur.rid = $citizen_role_id AND c.nid = $object->nid)")->fetchCol();
      break;
    case 'email_update_on_story_i_followed':
      $nid_target = $object->field_desk[LANGUAGE_NONE][0]['target_id'];
      $uids = db_query("SELECT DISTINCT(ha.uid) FROM {heartbeat_activity} ha  WHERE nid_target = $nid_target")->fetchCol();
      break;
    case 'email_report_on_story_i_followed':
    case 'email_report_status_on_story_i_followed':
      $nid_target = $object->field_stories[LANGUAGE_NONE][0]['target_id'];
      $uids = db_query("SELECT DISTINCT(ha.uid) FROM {heartbeat_activity} ha  WHERE nid_target = $nid_target")->fetchCol();
      break;
  }
  return $uids;
}

/**
  * Process variables for heartbeat-activity.tpl.php.
  */
function checkdesk_notifications_preprocess_heartbeat_activity(&$variables) {
  $variables['classes_array'][] = 'activity-content';
}

/**
 * Theme function for the timestamp of a message.
 */
function checkdesk_notifications_theme_heartbeat_time_ago($variables) {

  $message = $variables['heartbeat_activity'];

  $time_info = '';

  if ($message->show_message_times) {
    $message_date = _theme_time_ago($message->timestamp);
    if ($message->target_count <= 1 || $message->show_message_times_grouped) {

      $time_info .= '<span class="heartbeat-time-ago">';
      $time_info .= $message_date;
      $time_info .= '</span>';

    }
  }

  return $time_info;
}

/**
 * Implements hook_theme_registry_alter
 */
function checkdesk_notifications_theme_registry_alter(&$theme_registry) {
  $theme_registry['heartbeat_time_ago']['theme path'] = drupal_get_path('module', 'checkdesk_notifications');
  $theme_registry['heartbeat_time_ago']['function'] = 'checkdesk_notifications_theme_heartbeat_time_ago';
}

/**
 * Implements hook_token_info
 */
function checkdesk_notifications_token_info() {
  $info['tokens']['user']['notifications-url'] = array(
    'name' => t('Notifications URL'),
    'description' => t('URL to the notifications page of a user'),
  );
  return $info;
}

/**
 * Implements hook_tokens
 */
function checkdesk_notifications_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'user' && !empty($data['user']) && isset($tokens['notifications-url'])) {
    $user = $data['user'];
    $original = $tokens['notifications-url'];
    $replacements[$original] = url('user/' . $user->uid . '/notifications', array('absolute' => TRUE, 'alias' => TRUE, 'language' => $options['language']));
  }
  return $replacements;
}

/**
 *  Get followed stories
 *
 */
function _checkdesk_followed_stories($uid = 0) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $result = flag_get_user_flags('node', NULL, $uid);
  return array_keys($result['follow_story']);
}
