<?php
/**
 * @file
 * Main checkdesk_multitenancy file
 */

define('CHECKDESK_MULTITENANCY_GROUP_TYPE', 'newsroom');
define('CHECKDESK_MULTITENANCY_GROUPED_TYPE', 'discussion');

function _checkdesk_multitenancy_roles() {
  $roles = array();
  foreach (user_roles(TRUE) as $rid => $name) {
    if ($rid != DRUPAL_AUTHENTICATED_RID) {
      $roles[] = $name;
    }
  }
  return $roles;
}

/**
 * Implements hook_node_info().
 */
function checkdesk_multitenancy_node_info() {
  return array(
    CHECKDESK_MULTITENANCY_GROUP_TYPE => array(
      'name' => t('Newsroom'),
      'base' => 'node_content',
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'description' => t('A newsroom is a single Checkdesk instance (tenant) inside the whole Checkdesk environment.'),
      'comment' => array('status' => 2),
    )
  );
}

/**
 * Implements hook_form().
 */
function checkdesk_multitenancy_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_og_default_roles_alter().
 */
function checkdesk_multitenancy_og_default_roles_alter(&$roles) {
  $roles = _checkdesk_multitenancy_roles();
}

/**
 * Implements hook_node_insert().
 */
function checkdesk_multitenancy_node_insert($node) {
  if (og_is_group_type('node', $node->type)) {
    $og_roles = og_roles('node', $node->type);
    $rid = array_search('journalist', $og_roles);
    og_role_grant('node', $node->nid, $node->uid, $rid);
    $rid = array_search('administrator', $og_roles);
    og_role_grant('node', $node->nid, $node->uid, $rid);
  }
}

/**
 * Implements hook_og_permission_alter().
 */
function checkdesk_multitenancy_og_permission_alter(&$perms) {
  // Any member can invite other user
  $perms['invite any user']['default role'][] = OG_AUTHENTICATED_ROLE;

  // Journalists can assign roles
  $perms['manage members']['default role'][] = 'journalist';

  // Journalists can manage stories inside newsrooms
  $story_permissions = array_keys(og_list_permissions(CHECKDESK_MULTITENANCY_GROUPED_TYPE));
  foreach ($story_permissions as $name) {
    $perms[$name]['default role'] = array('journalist');
  }

  // Owners can do everything
  foreach ($perms as &$perm) {
    $perm['default role'][] = 'administrator';
  }
}

/**
 * Returns the current newsroom.
 */
function _checkdesk_multitenancy_current_newsroom() {
  // TODO
  return 0;
}

/**
 * Implements hook_node_access().
 */
function checkdesk_multitenancy_node_access($node, $op, $account) {
  if ($node->type == CHECKDESK_MULTITENANCY_GROUPED_TYPE) {
    $wrapper = entity_metadata_wrapper('node', $node);
    // FIXME: Assuming only one newsroom per story here
    $gid = $wrapper->{OG_AUDIENCE_FIELD}->get(0)->getIdentifier();
    $current = _checkdesk_multitenancy_current_newsroom();
    if ($current && $current != $gid) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_query_TAG_alter().
 */
function checkdesk_multitenancy_query_checkdesk_stories_alter($query) {
  global $user;
  $groups = og_get_groups_by_user($user, 'node');

  // Show nothing if user is not subscribed to any group
  if (!$groups || empty($groups)) {
    $query->condition('1', '2', '=');
  }

  else {
    $query->innerJoin('og_membership', 'ogm', 'ogm.etid = n.nid AND ogm.entity_type = :entity_type', array(':entity_type' => 'node'));
    $query->condition('ogm.gid', array_values($groups), 'IN');
  }
}

/**
 * Implements hook_node_type_insert().
 */
function checkdesk_multitenancy_node_type_insert($content_type) {
  if ($content_type->type == CHECKDESK_MULTITENANCY_GROUP_TYPE) {
    
    $body_instance = node_add_body_field($content_type, t('Description about this newsroom'));
    field_update_instance($body_instance);

    foreach (_checkdesk_multitenancy_installed_fields() as $field) {
      field_create_field($field);
    }

    foreach (_checkdesk_multitenancy_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = CHECKDESK_MULTITENANCY_GROUP_TYPE;
      field_create_instance($instance);
    }
  }
}

function _checkdesk_multitenancy_installed_fields() {

  // Prefix all field names with the group type name
  $p = CHECKDESK_MULTITENANCY_GROUP_TYPE;

  return array(
    $p . '_twitter_bot' => array(
      'field_name' => $p . '_twitter_bot',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    $p . '_url' => array(
      'field_name'  => $p . '_url',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    $p . '_logo' => array(
      'field_name'  => $p . '_logo',
      'type'        => 'image',
      'cardinality' => 1,
    ),
    $p . '_slogan' => array(
      'field_name'   => $p . '_slogan',
      'type'         => 'text',
      'cardinality'  => 1,
      'translatable' => true,
    ),
    $p . '_owner' => array(
      'field_name' => $p . '_owner',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    $p . '_owner_url' => array(
      'field_name' => $p . '_owner_url',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    $p . '_owner_email' => array(
      'field_name' => $p . '_owner_email',
      'type'       => 'text',
      'cardinality' => 1,
    ),
  );
}

function _checkdesk_multitenancy_installed_instances() {

  // Prefix all field names with the group type name
  $p = CHECKDESK_MULTITENANCY_GROUP_TYPE;

  return array(
    $p . '_twitter_bot' => array(
      'field_name' => $p . '_twitter_bot',
      'label'      => t('Twitter Bot'),
      'widget'     => array('type' => 'text_textfield'),
    ),
    $p . '_url' => array(
      'field_name' => $p . '_url',
      'label'      => t('URL prefix (e.g., checkdesk.org/<prefix>'),
      'widget'     => array('type' => 'text_textfield'),
    ),
    $p . '_logo' => array(
      'field_name' => $p . '_logo',
      'label'      => t('Logo'),
      'required'   => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
    ),
    $p . '_slogan' => array(
      'field_name' => $p . '_slogan',
      'label'      => t('Slogan'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_owner' => array(
      'field_name' => $p . '_owner',
      'label'      => t('Owner'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_owne_url' => array(
      'field_name' => $p . '_owner_url',
      'label'      => t('Owner Website'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_owner_email' => array(
      'field_name' => $p . '_owner_email',
      'label'      => t('Owner e-mail'),
      'widget' => array('type' => 'text_textfield'),
    ),
  );
}
