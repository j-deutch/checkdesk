<?php
/**
 * @file
 * Main checkdesk_multitenancy file
 */

define('CHECKDESK_MULTITENANCY_GROUP_TYPE', 'newsroom');
define('CHECKDESK_MULTITENANCY_GROUPED_TYPE', 'discussion');

/**
 * Implements hook_init().
 */
function checkdesk_multitenancy_init() {
  $group = _checkdesk_multitenancy_get_group();
  if ($group) {
    $custom_css = $group->custom_css[LANGUAGE_NONE][0]['value'];
    drupal_add_css($custom_css, array('type' => 'inline', 'weight' => 9999, 'group' => CSS_THEME));
  }
}

function _checkdesk_multitenancy_get_group() {
  $group = NULL;

  if (arg(0) === 'node' && is_numeric(arg(1))) {

    $node = node_load(arg(1));

    if ($node) {
      switch ($node->type) {
        case CHECKDESK_MULTITENANCY_GROUP_TYPE:
          $group = $node;
          break;
        case CHECKDESK_MULTITENANCY_GROUPED_TYPE:
          $group = _checkdesk_multitenancy_get_group_from_grouped($node);
          break;
        // FIXME: Assumption
        case 'post':
          $story = $node->field_desk[LANGUAGE_NONE][0]['target_id'];
          if ($story && node_load($story)) {
            $group = _checkdesk_multitenancy_get_group_from_grouped($story);
          }
          break;
        // FIXME: Assumption
        case 'media':
          $story = $node->field_stories[LANGUAGE_NONE][0]['target_id'];
          if ($story && node_load($story)) {
            $group = _checkdesk_multitenancy_get_group_from_grouped($story);
          }
          break;
      }
    }
  }

  return $group;
}

function _checkdesk_multitenancy_get_group_from_grouped($grouped) {
  if (is_numeric($grouped)) {
    $grouped = node_load($grouped);
  }
  $wrapper = entity_metadata_wrapper('node', $grouped);
  $gid = $wrapper->{OG_AUDIENCE_FIELD}->get(0)->getIdentifier();
  $group = node_load($gid);
  return $group;
}

function _checkdesk_multitenancy_roles() {
  $roles = array();
  foreach (user_roles(TRUE) as $rid => $name) {
    if ($rid != DRUPAL_AUTHENTICATED_RID) {
      $roles[] = $name;
    }
  }
  return $roles;
}

/**
 * Implements hook_node_info().
 */
function checkdesk_multitenancy_node_info() {
  return array(
    CHECKDESK_MULTITENANCY_GROUP_TYPE => array(
      'name' => t('Newsroom'),
      'base' => 'node_content',
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'description' => t('A newsroom is a single Checkdesk instance (tenant) inside the whole Checkdesk environment.'),
      'comment' => array('status' => 2),
    )
  );
}

/**
 * Implements hook_form().
 */
function checkdesk_multitenancy_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_og_default_roles_alter().
 */
function checkdesk_multitenancy_og_default_roles_alter(&$roles) {
  $roles = _checkdesk_multitenancy_roles();
}

/**
 * Implements hook_node_insert().
 */
function checkdesk_multitenancy_node_insert($node) {
  if (og_is_group_type('node', $node->type)) {
    $og_roles = og_roles('node', $node->type);
    $rid = array_search('journalist', $og_roles);
    og_role_grant('node', $node->nid, $node->uid, $rid);
    $rid = array_search('administrator', $og_roles);
    og_role_grant('node', $node->nid, $node->uid, $rid);
  }
}

/**
 * Implements hook_og_permission_alter().
 */
function checkdesk_multitenancy_og_permission_alter(&$perms) {
  // Any member can invite other user
  $perms['invite any user']['default role'][] = OG_AUTHENTICATED_ROLE;

  // Journalists can assign roles
  $perms['manage members']['default role'][] = 'journalist';

  // Journalists can manage stories inside newsrooms
  $story_permissions = array_keys(og_list_permissions(CHECKDESK_MULTITENANCY_GROUPED_TYPE));
  foreach ($story_permissions as $name) {
    $perms[$name]['default role'] = array('journalist');
  }

  // Owners can do everything
  foreach ($perms as &$perm) {
    $perm['default role'][] = 'administrator';
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function checkdesk_multitenancy_query_checkdesk_stories_alter($query) {
  global $user;
  $groups = og_get_groups_by_user($user, 'node');

  // Show nothing if user is not subscribed to any group
  if (!$groups || empty($groups)) {
    $query->condition('1', '2', '=');
  }

  else {
    $query->innerJoin('og_membership', 'ogm', 'ogm.etid = n.nid AND ogm.entity_type = :entity_type', array(':entity_type' => 'node'));
    $query->condition('ogm.gid', array_values($groups), 'IN');
  }
}

/**
 * Implements hook_node_type_insert().
 */
function checkdesk_multitenancy_node_type_insert($content_type) {
  if ($content_type->type == CHECKDESK_MULTITENANCY_GROUP_TYPE) {
    
    $body_instance = node_add_body_field($content_type, t('Description about this newsroom'));
    field_update_instance($body_instance);

    foreach (_checkdesk_multitenancy_installed_fields() as $field) {
      field_create_field($field);
    }

    foreach (_checkdesk_multitenancy_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = CHECKDESK_MULTITENANCY_GROUP_TYPE;
      field_create_instance($instance);
    }
  }
}

function _checkdesk_multitenancy_installed_fields() {

  // Prefix all field names with the group type name
  $p = CHECKDESK_MULTITENANCY_GROUP_TYPE;

  $fields = array(
    $p . '_twitter_bot' => array(
      'field_name' => $p . '_twitter_bot',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    $p . '_url' => array(
      'field_name'  => $p . '_url',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    $p . '_logo' => array(
      'field_name'  => $p . '_logo',
      'type'        => 'image',
      'cardinality' => 1,
    ),
    $p . '_slogan' => array(
      'field_name'   => $p . '_slogan',
      'type'         => 'text',
      'cardinality'  => 1,
      'translatable' => true,
    ),
    $p . '_owner_name' => array(
      'field_name' => $p . '_owner_name',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    $p . '_owner_url' => array(
      'field_name' => $p . '_owner_url',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    $p . '_owner_email' => array(
      'field_name' => $p . '_owner_email',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    $p . '_social_twitter' => array(
      'field_name'   => $p . '_social_twitter',
      'type'         => 'text',
      'cardinality'  => 1,
    ),
    $p . '_social_facebook' => array(
      'field_name'   => $p . '_social_facebook',
      'type'         => 'text',
      'cardinality'  => 1,
    ),
    $p . '_social_gplus' => array(
      'field_name'   => $p . '_social_gplus',
      'type'         => 'text',
      'cardinality'  => 1,
    ),
  );
  
  if (module_exists('meedan_custom_css')) {
    $fields['custom_css'] = array(
      'field_name'  => 'custom_css',
      'type'        => 'text',
      'cardinality' => 1,
    );
  }

  return $fields;
}

function _checkdesk_multitenancy_installed_instances() {

  // Prefix all field names with the group type name
  $p = CHECKDESK_MULTITENANCY_GROUP_TYPE;

  $fields = array(
    $p . '_twitter_bot' => array(
      'field_name' => $p . '_twitter_bot',
      'label'      => t('Twitter Bot'),
      'widget'     => array('type' => 'text_textfield'),
    ),
    $p . '_url' => array(
      'field_name' => $p . '_url',
      'label'      => t('URL prefix (e.g., checkdesk.org/<prefix>'),
      'widget'     => array('type' => 'text_textfield'),
    ),
    $p . '_logo' => array(
      'field_name' => $p . '_logo',
      'label'      => t('Logo'),
      'required'   => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
    ),
    $p . '_slogan' => array(
      'field_name' => $p . '_slogan',
      'label'      => t('Slogan'),
      'widget' => array('type' => 'text_textfield'),
    ),    
    $p . '_owner_name' => array(
      'field_name' => $p . '_owner_name',
      'label'      => t('Owner'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_owner_url' => array(
      'field_name' => $p . '_owner_url',
      'label'      => t('Owner Website'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_owner_email' => array(
      'field_name' => $p . '_owner_email',
      'label'      => t('Owner e-mail'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_social_twitter' => array(
      'field_name' => $p . '_social_twitter',
      'label'      => t('Twitter URL'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_social_facebook' => array(
      'field_name' => $p . '_social_facebook',
      'label'      => t('Facebook URL'),
      'widget' => array('type' => 'text_textfield'),
    ),
    $p . '_social_gplus' => array(
      'field_name' => $p . '_social_gplus',
      'label'      => t('Google+ URL'),
      'widget' => array('type' => 'text_textfield'),
    ),
  );

  if (module_exists('meedan_custom_css')) {
    $fields['custom_css'] = array(
      'field_name' => 'custom_css',
      'label'      => t('Custom CSS'),
      'widget'     => array('type' => 'text_textfield'),
    );
  }

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function checkdesk_multitenancy_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == CHECKDESK_MULTITENANCY_GROUP_TYPE . '_node_form') {

    // Wrap "owner" fields in a fieldset

    $prefix = CHECKDESK_MULTITENANCY_GROUP_TYPE . '_owner_';
    $form['owner'] = array(
      '#type' => 'fieldset',
      '#title' => t('Owner'),
      '#collapsible' => true,
      '#collapsed' => false,
    );
    $attrs = array('name', 'url', 'email');
    foreach ($attrs as $field) {
      $form['owner'][$prefix . $field] = $form[$prefix . $field];
      unset($form[$prefix . $field]);
    }

    // Wrap social links fields in a fieldset

    $prefix = CHECKDESK_MULTITENANCY_GROUP_TYPE . '_social_';
    $form['social'] = array(
      '#type' => 'fieldset',
      '#title' => t('Social links'),
      '#collapsible' => true,
      '#collapsed' => false,
    );
    $attrs = array('twitter', 'facebook', 'gplus');
    foreach ($attrs as $field) {
      $form['social'][$prefix . $field] = $form[$prefix . $field];
      unset($form[$prefix . $field]);
    }

    // Add custom CSS field

    if (module_exists('meedan_custom_css') && isset($form_state['node']) && isset($form_state['node']->nid)) {
      global $theme;

      $node = node_load($form_state['node']->nid);
      $default = $node->custom_css[LANGUAGE_NONE][0]['value'];
      $preview_path = drupal_get_path_alias('node/' . $node->nid);

      _meedan_custom_css_add_form_partial(&$form, $default, $theme, $preview_path);

      $form['custom_css_wrapper'] = array(
        '#type' => 'fieldset',
        '#title' => t('Custom CSS'),
        '#collapsible' => true,
        '#collapsed' => false,
      );
      $fields = array('custom_css', 'custom_css_preview');
      foreach ($fields as $field) {
        $form['custom_css_wrapper'][$field] = $form[$field];
        unset($form[$field]);
      }

      $form['actions']['submit']['#submit'][] = '_checkdesk_multitenancy_custom_css_submit';
    }
    else {
      unset($form['custom_css']);
    }
      
    $form['#validate'][] = '_checkdesk_multitenancy_newsroom_validation';
  }
}

function _checkdesk_multitenancy_newsroom_validation($form, &$form_state) {
  if (empty($form_state['values']['newsroom_owner_name'][LANGUAGE_NONE][0]['value'])) {
    $form_state['values']['newsroom_owner_name'][LANGUAGE_NONE][0]['value'] = $form_state['values']['title'];
  }

  if (empty($form_state['values']['newsroom_url'][LANGUAGE_NONE][0]['value'])) {
    $form_state['values']['newsroom_url'][LANGUAGE_NONE][0]['value'] = $form_state['values']['title'];
  }

  module_load_include('inc','pathauto','pathauto');
  $form_state['values']['newsroom_url'][LANGUAGE_NONE][0]['value'] = pathauto_cleanstring($form_state['values']['newsroom_url'][LANGUAGE_NONE][0]['value']);
}

function _checkdesk_multitenancy_custom_css_submit($form, &$form_state) {
  if (isset($form_state['node'])) {
    $node = node_load($form_state['node']->nid);
    if ($node) {
      $node->custom_css[LANGUAGE_NONE][0]['value'] = $form_state['input']['custom_css'];
      node_save($node);
    }
  }
}

/**
 * Implements hook_preprocess_region().
 */
function checkdesk_multitenancy_preprocess_region(&$variables) {
  global $language;

  $group = _checkdesk_multitenancy_get_group();

  if ($group) {

    // Set the logo

    $image = $group->newsroom_logo[LANGUAGE_NONE][0]['uri'];
    if (!empty($image)) {
      $header_image_data = array(
        'style_name' => 'partner_logo',
        'path' => $image,
      );
      $path = drupal_get_path_alias('node/' . $group->nid);
      $variables['header_image'] = l(theme('image_style', $header_image_data), $path,
                                     array('html' => TRUE, 'attributes' => array('class' => array('partner_logo'))));
    }

    // Set the slogan

    $slogan = $group->newsroom_slogan[$language->language][0]['value'];
    if (empty($slogan)) {
      $t = 'A Checkdesk live blog by <a href="@partner_url" target="_blank"><span class="checkdesk-slogan-partner">@partner</span></a>';
      $slogan = t($t, array('@partner' => $group->newsroom_owner_name[LANGUAGE_NONE][0]['value'], 
                            '@partner_url' => $group->newsroom_owner_url[LANGUAGE_NONE][0]['value']));
    }
    $variables['header_slogan'] = $slogan;

  }
}

/**
 * Implements hook_views_query_alter().
 */
function checkdesk_multitenancy_views_query_alter(&$view, &$query) {
  if ($view->name == 'featured_stories' || $view->name == 'liveblog') {
    $group = _checkdesk_multitenancy_get_group();
    
    if ($group) {
      $join = new views_join();
      $join->construct('og_membership', 'node', 'nid', 'etid', array(), 'LEFT');
      $query->add_relationship('ogm', $join, 'og_membership');

      $query->add_field('node', 'nid', 'nid', array('function' => 'groupby'));
      $query->add_groupby('node.nid');
          
      $query->add_where(1, 'ogm.gid', $group->nid);
      $query->add_where(1, 'ogm.entity_type', 'node');
      $query->add_where(1, 'ogm.group_type', 'node');
    }
  }
}

/**
 * Implements hook_block_info().
 */
function checkdesk_multitenancy_block_info() {
  $blocks['followus'] = array(
    'info' => t('Follow us'),
    'status' => 1,
    'region' => 'widgets',
    'visibility' => BLOCK_VISIBILITY_NOT_LISTED,
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function checkdesk_multitenancy_block_view($delta = '') {
  $block = array();

  if ($delta == 'followus') {
    $group = _checkdesk_multitenancy_get_group();

    if ($group) {
      $variables = array(
                     'twitter' => $group->newsroom_social_twitter[LANGUAGE_NONE][0]['value'],
                     'facebook' => $group->newsroom_social_facebook[LANGUAGE_NONE][0]['value'],
                     'gplus' => $group->newsroom_social_gplus[LANGUAGE_NONE][0]['value'],
                   );
      $block['content'] = theme('blockfollowus', $variables);
    }
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function checkdesk_multitenancy_theme() {
  return array(
    'blockfollowus' => array(
      'variables' => array('twitter' => NULL, 'facebook' => NULL, 'gplus' => NULL),
      'template' => 'blockfollowus',
    ),
  );
}

/**
 * Implements hook_preprocess_html().
 */
function checkdesk_multitenancy_preprocess_html(&$variables) {
  $group = _checkdesk_multitenancy_get_group();

  if ($group) {
    $head_title = array();
    $title = drupal_get_title();
    if (!empty($title)) {
      $head_title[] = htmlspecialchars_decode($title);
    }
    $head_title[] = $group->title;
    $variables['head_title'] = strip_tags(implode(' | ', array_unique($head_title)));
  }
}

/**
 * Implements hook_node_view().
 */
function checkdesk_multitenancy_node_view($node, $view_mode, $langcode) {
  if ($node->type == CHECKDESK_MULTITENANCY_GROUP_TYPE) {
    $view = views_get_view('liveblog');

    $node->content = array(
      'liveblog' => array(
        '#markup' => views_embed_view('liveblog', 'page'),
      )
    );
  }
}

/**
 * Implements hook_menu().
 */
function checkdesk_multitenancy_menu() {
  $items = array();

  $items['checkdesk_multitenancy_frontpage'] = array(
    'title' => t('Home'),
    'page callback' => '_checkdesk_multitenancy_frontpage',
    'access callback' => TRUE,
  );

  return $items;
}

function _checkdesk_multitenancy_frontpage() {
  return 'Frontpage to be defined';
}

/**
 * Implements hook_node_access().
 */
function checkdesk_multitenancy_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // FIXME: Assumption about node types
  if (($type == 'post' || $type == 'media') && $op != 'view') {
    $params = drupal_get_query_parameters();
    $story_id = $params['story'];
    if (!$story_id) {
      $story_id = $params['ref_nid'];
    }

    if ($story_id) {
      $story = node_load($story_id);
      $story_group = _checkdesk_multitenancy_get_group_from_grouped($story);
      $user_groups = og_get_groups_by_user($account, 'node');
      if (in_array($story_group->nid, array_values($user_groups))) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}
