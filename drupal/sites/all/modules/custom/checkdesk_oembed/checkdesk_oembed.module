<?php

// The version of our embed support. This number should be incremented every
// time a change is made which causes the embed/* URLs to change behaviour.
define('CHECKDESK_OEMBED_VERSION', '1.0');

/**
 * Implements hook_menu().
 */
function checkdesk_oembed_menu() {
  $items = array();
  $items['embed/%node'] = array(
    'title' => 'Embedded Checkdesk reports or stories',
    'page callback' => 'checkdesk_oembed_embed',
    'page arguments' => array(1),
    'access callback' => 'checkdesk_oembed_embed_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu access callback to limit widget embeds to our node types.
 */
function checkdesk_oembed_embed_access($node) {
  $types = variable_get('checkdesk_oembed_embed_types', array('media', 'discussion'));
  return $node && in_array($node->type, $types) && node_access('view', $node);
}

/**
 * Renders the embedded version of a report using the meedan_oembed view mode.
 *
 * This is what is INSIDE of the IFRAME.
 */
function checkdesk_oembed_embed($node) {
  drupal_add_library('meedan_iframes', 'meedan_iframes.child');

  drupal_add_js(array('meedanIframes' => array('contentSelector' => '.cd-embed')), 'setting');

  return node_view_multiple(array($node->nid => $node), 'meedan_oembed');
}

/**
 * Implements hook_node_view().
 */
function checkdesk_oembed_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && checkdesk_oembed_embed_access($node)) {
    $site = variable_get('site_name', 'Checkdesk');
    drupal_add_html_head(
      array(
        '#tag' => 'link',
        '#attributes' => array(
          'href' => checkdesk_oembed_url($node->nid, array('format' => 'json')),
          'rel' => 'alternate',
          'type' => 'application/json+oembed',
          'title' => t('@site oEmbed Profile', array('@site' => $site)),
        ),
      ),
      'checkdesk_oembed_provider_json'
    );
  }
}

/**
 * Creates a full URL to the oEmbed information for our provider.
 */
function checkdesk_oembed_url($nid, $attributes) {
  $defaults = array(
    'url' => url('node/' . $nid, array('absolute' => TRUE, 'language' => (object) array('language' => FALSE), 'alias' => TRUE)),
    'format' => 'json',
  );
  $options = array(
    'query' => array_merge($defaults, $attributes),
    'absolute' => TRUE,
    'language' => (object) array('language' => FALSE)
  );
  return url('oembed/endpoint', $options);
}

/**
 * Implements hook_oembedprovider_alter().
 *
 * Removes the default node support generated by oembedprovider module. Node
 * provider support is replaced by that of this module.
 */
function checkdesk_oembed_oembedprovider_alter(&$providers) {
  $host = _oembedcore_get_host(url('', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))));

  foreach ($providers[$host] as $regex_pattern => $info) {
    if ($info['callback'] == 'oembedprovider_node_provider') {
      unset($providers[$host][$regex_pattern]);
    }
  }
  $pattern = url('node', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))) . '/*';
  $regex_pattern = '/' . str_replace('\*', '(.*)', preg_quote($pattern, '/')) . '/i';

  $providers[$host][$regex_pattern] = array(
    'callback' => 'checkdesk_oembed_provider',
  );
}

/**
 * OEmbed provider callback for embed/*
 *
 * Example:
 *   http://www.checkdesk.org/oembed/endpoint?url=http%3A//www.checkdesk.org/embed/123&format=json
 */
function checkdesk_oembed_provider($provider, $url, $matches) {
  $node = node_load($matches[1]);

  if (!$node || !checkdesk_oembed_embed_access($node)) {
    return FALSE;
  }

  $author = user_load($node->uid);

  $languages = language_list();
  $language = $languages[$node->language];

  $result = _oembedprovider_result('rich', array(
    'html' => checkdesk_oembed_embed_code($node->nid),
    'width' => 0,
    'height' => 0,
    'title' => $node->title,
    'author_name' => $author->name,
    'author_url' => url('user/' . $author->uid, array('absolute' => TRUE)),
    'version' => CHECKDESK_OEMBED_VERSION,
    'provider_url' => url('', array('absolute' => TRUE)),
  ));

  return $result;
}

/**
 * Returns the embed code for a node.
 *
 * @param  (int) $nid
 * @return (string) $embed_code
 */
function checkdesk_oembed_embed_code($nid) {
  $src = url('embed/' . $nid);
  return theme('meedan_iframe', array('src' => $src, 'attributes' => array('style' => 'width: 100%;')));
}

/**
 * Custom favicons via FontAwesome
 */
function _checkdesk_favicons($provider) {
  $output = '';
  if($provider == 'youtube') {
    $output = '<span class="icon-youtube-play"></span>';
  } else {
    $output = '<span class="icon-' . $provider . '"></span>';
  }
  return $output;
}

/**
 * List of media providers
 */
function _checkdesk_providers() {
  $providers = array(
    'youtube', 'twitter', 'vimeo'
  );
  return $providers;
}
