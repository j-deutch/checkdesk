<?php

/**
 * Implementation of hook_menu().
 */
function checkdesk_activity_menu() {
  return array(
    'activity' => array(
      'title' => 'Activity stream feed',
      'page callback' => 'checkdesk_activity_feed',
      'access callback' => TRUE,
    ),
  );
}

/**
 * Menu handler for `/activity'.
 */
function checkdesk_activity_feed($since = NULL) {
  if (empty($since) && !empty($_REQUEST['since'])) {
    $since = $_REQUEST['since'];
  }
  $query = db_select('heartbeat_activity', 'ha')
  ->fields('ha')
  ->orderBy('timestamp', 'DESC')
  ->range(0, 100);
  if (!empty($since)) {
    $query->condition('timestamp', $since, '>');
  }
  $activities = checkdesk_activity__activities($query->execute()->fetchAll());
  return drupal_json_output($activities);
}

/**
 * Helper function to convert Heartbeat stream to JSON format.
 */
function checkdesk_activity__activities($stream) {
  // Convert to activitystrea.ms format
  // @see http://activitystrea.ms/specs/json/1.0/
  $activities = array();
  foreach ($stream as $activity) {
    $activities[] = checkdesk_activity__activity($activity);
  }
  return $activities;
}

/**
 * Helper function to convert single Heartbeat activity to JSON format.
 */
function checkdesk_activity__activity($activity) {
  $variables = heartbeat_decode_message_variables($activity->variables);
  $template = heartbeat_message_template_load($activity->message_id);
  return (object)array(
    'published' => date('c', $activity->timestamp),
    'title' => t($template->message, $variables),
    'actor' => array(
      'url' => url('user/' . $activity->uid, array('absolute' => TRUE)),
      'objectType' => 'person',
      'id' => $activity->uid,
      'image' => checkdesk_activity__user_picture($activity->uid, 'activity_avatar'),
    ),
    'verb' => 'post',
    'object' => array(
      'url' => url('node/' . $activity->nid, array('absolute' => TRUE)),
      'id' => $activity->nid,
    ),
  );
}

/**
 * Helper function to extract user picture.
 */
function checkdesk_activity__user_picture($uid, $style = '') {
  $account = user_load($uid);
  $filepath = NULL;
  if (!empty($account->picture)) {
    if (is_numeric($account->picture)) {
      $account->picture = file_load($account->picture);
    }
    if (!empty($account->picture->uri)) {
      $filepath = $account->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  $style = empty($style) ? variable_get('user_picture_style', '') : $style;
  $stylepath = image_style_path($style, $filepath);
  $dimensions = @getimagesize($stylepath);
  return array(
    'url' => image_style_url($style, $filepath),
    'width' => @$dimensions[0],
    'height' => @$dimensions[1],
  );
}
