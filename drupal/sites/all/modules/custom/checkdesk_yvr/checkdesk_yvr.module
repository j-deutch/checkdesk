<?php

function checkdesk_yvr_menu() {
  return [
    'api/login' => [
      'title' => 'Login endpoint',
      'page callback' => 'checkdesk_yvr_login',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ],
    'api/report' => [
      'title' => 'Report endpoint',
      'page callback' => 'checkdesk_yvr_report',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ],
    'api/notification' => [
      'title' => 'Notification endpoint',
      'page callback' => 'checkdesk_yvr_notification',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ],
    'checkdesk/test/notifications' => [
      'title' => 'Test notifications update',
      'page callback' => 'checkdesk_yvr_test_notifications',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ],
  ];
}

function checkdesk_yvr_access() {
  // TODO Check X-Checkdesk-Signature against payload
  // @see checkdesk_bot
  // TODO Check X-Checkdesk-Token and X-Checkdesk-Uuid, if set, against tokens table
  if (array_key_exists('HTTP_X_CHECKDESK_UUID', $_SERVER)) {
    global $user;
    $uid = $_SERVER['HTTP_X_CHECKDESK_UUID'];
    $account = user_load($uid);
    if (empty($account)) {
      watchdog('checkdesk_yvr', 'User @uid not found', ['@uid' => $uid], WATCHDOG_ERROR);
      return FALSE;
    }
    $form_state = ['uid' => $uid];
    user_login_submit([], $form_state);
  }
  return TRUE;
}

function checkdesk_yvr_login() {
  if (!checkdesk_yvr_access()) drupal_access_denied();

  // Given username and password:
  // log the user in Drupal,
  // create login token,
  // return token and uid.
  // TODO
  $username = @$_REQUEST['username'];
  $user = user_load_by_name($username);
  if (empty($user)) {
    drupal_access_denied();
  }
  $token = "hello caio!";
  drupal_json_output([
    'uuid' => $user->uid,
    'token' => $token
  ]);
}

function checkdesk_yvr_report() {
  if (!checkdesk_yvr_access()) drupal_access_denied();

  $nid = @$_REQUEST['nid'];
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'POST':
      return drupal_json_output(checkdesk_yvr_report_post($nid));
    case 'GET':
      return drupal_json_output(checkdesk_yvr_report_get($nid));
    case 'DELETE':
      return drupal_json_output(checkdesk_yvr_report_delete($nid));
    default:
      // TODO watchdog
      // TODO 400 bad request
  }
}

function checkdesk_yvr_report_post($nid) {
  global $user;
  // TODO check user access
  // TODO check existing $nid
  $url = @$_REQUEST['url'];
  // TODO validate url
  $report = checkdesk_yvr_import_report($url, $user->uid);
  // TODO validate report
  return [
    'report' => [
      'id' => $report->nid,
      'title' => $report->title,
      'body' => $report->body[LANGUAGE_NONE][0]['value'],
      'url' => $report->field_link[LANGUAGE_NONE][0]['url'],
    ]
  ];
}

function checkdesk_yvr_report_get($nid) {
  // TODO
}

function checkdesk_yvr_report_delete($nid) {
  // TODO
}

function checkdesk_yvr_import_report($report_url, $sender_uid, $story_nid = null) {
  $report = new StdClass;
  $report->type = 'media';
  node_object_prepare($report);
  $report->status = 1;
  $report->title = ''; // auto_nodetitle should take care of that
  $report->body[LANGUAGE_NONE][]['value'] = '';
  $report->language = LANGUAGE_NONE;
  $report->uid = $sender_uid;
  $report->field_link[LANGUAGE_NONE][]['url'] = $report_url;
  if (!empty($story_nid)) {
    $report->field_stories[LANGUAGE_NONE][]['target_id'] = $story_nid;
  }
  if ($report = node_submit($report)) {
    node_save($report);
    return $report;
  }
  return false;
}

function checkdesk_yvr_notification() {
  if (!checkdesk_yvr_access()) drupal_access_denied();

  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      return drupal_json_output(checkdesk_yvr_notification_get());
    default:
      // TODO watchdog
      // TODO 400 bad request
  }
}

function checkdesk_yvr_notification_get() {
  $notifications = [];
  foreach (views_get_view_result('my_notifications') as $row) {
    $activity = heartbeat_activity_load($row->uaid);
    $notifications[] = checkdesk_yvr_heartbeat_to_activity($activity);
  }

  // activate nodejs channel.
  nodejs_send_content_channel_token('notifications');

  return $notifications;
}

function checkdesk_yvr_heartbeat_to_activity($activity) {
  $map = [
    'new_report' => t('added new report'),
    'checkdesk_report_published_in_update' => t('published report'),
  ];
  $object = node_load($activity->nid);
  return [
    'id' => $activity->uaid,
    'actor' => [
      'name' => $activity->actor->name,
      'id' => $activity->actor->uid,
    ],
    'verb' => isset($map[$activity->message_id]) ? $map[$activity->message_id] : $activity->message_id,
    'object' => [
      'type' => $object->type,
      'title' => $object->title,
      'id' => $object->nid,
    ],
  ];
}

function checkdesk_yvr_heartbeat_activity_insert($heartbeatActivity) {
  $message = (object)[
    'channel' => 'notifications',
    'activity' => checkdesk_yvr_heartbeat_to_activity($heartbeatActivity),
    'callback' => 'notificationDisplay',
  ];
  // Send the message to the channel we created
  nodejs_send_content_channel_message($message);
}

function checkdesk_yvr_test_notifications() {
  nodejs_send_content_channel_token('notifications');
  drupal_set_message(t('Perform some Checkdesk actions in another browser window and watch what happens here...'));
  drupal_add_js(drupal_get_path('module', 'checkdesk_yvr') . '/checkdesk_yvr.js');
  return '<ul id="notifications"></ul>';
}
