<?php

/**
 * Implementation of hook_menu().
 */
function checkdesk_sources_menu() {
  $items = array();

  $items['admin/config/services/checkdesk-sources'] = array(
    'title' => 'Checkdesk Sources',
    'description' => 'Administer Checkdesk Sources configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_checkdesk_sources_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'checkdesk_sources.admin.inc',
    'file path' => drupal_get_path('module', 'checkdesk_sources') . '/includes',
  );
  return $items;
}

/**
 * Implements hook_node_presave().
 */
function checkdesk_sources_node_presave($node) {
  if ($node->type === 'source') {
    $url = $node->source_url[LANGUAGE_NONE][0]['value'];
    $pender_response =  checkdesk_sources_pender_fetch($url);
    if ($pender_response && $pender_response->type === 'media') {
      $data = $pender_response->data;
      $node->body[LANGUAGE_NONE][0]['value'] = $data->description;
      $node->field_username[LANGUAGE_NONE][0]['value'] = $data->title;
      $node->title = $data->title;
      $metadata = array('view_count' => 'Views', 'subscriber_count' => 'Subscribers', 'comment_count' => 'Comments');
      $i = 0;
      $node->source_data = array(LANGUAGE_NONE => array());
      foreach($metadata as $key => $value) {
        if (isset($data->{$key})) {
          $node->source_data[LANGUAGE_NONE][$i] = array(
            'first' => $data->{$key},
            'second' => $value
          );
          $i++;
        }
      }
    }
  }
}

function checkdesk_sources_pender_fetch($url) {
  $pender = FALSE;
  // Mock a render element for cache keys and expiration. This element will
  // not be rendered.
  $element = pender_render_cache('pender_request', $url);
  $cache_key = implode(':', $element['#cache']['keys']);
  $cache = cache_get($cache_key, $element['#cache']['bin']);

  // Cache hit.
  if ($cache && isset($cache->data)) {
    $pender = $cache->data;
  }
  else {
    $ch = curl_init('PENDER');
    curl_setopt($ch, CURLOPT_URL, variable_get('checkdesk_sources_pender_host') . '/api/medias?url=' . $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Pender-Token: ' . variable_get('checkdesk_sources_pender_key')));
    $response = json_decode(curl_exec($ch));
    curl_close($ch);
    if ($response->type == 'error') {
      watchdog('Pender', 'Error fetching data from %url [@msg].', array('%url' => $url, '@msg' => $response->data), WATCHDOG_ERROR);
    }
    else {
      $pender = $response;
      cache_set($cache_key, $pender, $element['#cache']['bin'], $element['#cache']['expire']);
    }
  }
  return $pender;
}

/**
 * Prepare an element for caching based on a Pender request.
 *
 * @param $url
 *   URL to fetch.
 * @param $expire
 *   The cache expire time, passed eventually to cache_set().
 * @param $granularity
 *   One or more granularity constants passed to drupal_render_cid_parts().
 *
 * @return
 *   A renderable array with the following keys and values:
 *   - #url: The passed-in $url.
 *   - #cache: An associative array prepared for drupal_render_cache_set().
 *
 * @see drupal_render_cache_by_query().
 */
function pender_render_cache($type, $url, $expire = NULL, $granularity = NULL) {
  $cache_keys = array();
  $cache_keys[] = $type;
  $cache_keys[] = hash('sha256', $url);
  // If expire is not set, use default value and adjust for request time.
  if (!isset($expire)) {
    $expire = variable_get('pender_cache_lifetime', 3600);
    if ($expire) {
      $expire += REQUEST_TIME;
    }
  }

  return array(
    '#type' => $type,
    '#url' => $url,
    '#cache' => array(
      'keys' => $cache_keys,
      'granularity' => $granularity,
      'expire' => $expire,
      'bin' => 'cache_pender',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function checkdesk_sources_flush_caches() {
  if (variable_get('pender_cache_flush', TRUE)) {
    return array('cache_pender');
  }
}

/**
 * Implements hook_cron().
 */
function checkdesk_sources_cron() {
  if (!variable_get('pender_cache_flush', TRUE)) {
    cache_clear_all(NULL, 'cache_pender');
  }
}
