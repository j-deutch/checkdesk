diff --git a/drupal/sites/all/modules/contrib/nodejs/nodejs.js b/drupal/sites/all/modules/contrib/nodejs/nodejs.js
index a9a42d7..53b8f0e 100644
--- a/drupal/sites/all/modules/contrib/nodejs/nodejs.js
+++ b/drupal/sites/all/modules/contrib/nodejs/nodejs.js
@@ -20,6 +20,9 @@ Drupal.behaviors.nodejs = {
 Drupal.Nodejs.runCallbacks = function (message) {
   // It's possible that this message originated from an ajax request from the
   // client associated with this socket.
+  if (message.hostName != Drupal.settings.nodejs.hostName) {
+    return;
+  }
   if (message.clientSocketId == Drupal.Nodejs.socket.id) {
     return;
   }
@@ -124,7 +127,8 @@ Drupal.Nodejs.checkConnection = function () {
 Drupal.Nodejs.sendAuthMessage = function () {
   var authMessage = {
     authToken: Drupal.settings.nodejs.authToken,
-    contentTokens: Drupal.settings.nodejs.contentTokens
+    contentTokens: Drupal.settings.nodejs.contentTokens,
+    hostName: Drupal.settings.nodejs.hostName
   };
   Drupal.Nodejs.socket.emit('authenticate', authMessage);
 };
diff --git a/drupal/sites/all/modules/contrib/nodejs/nodejs.module b/drupal/sites/all/modules/contrib/nodejs/nodejs.module
index 153e5ab..fec7a0a 100644
--- a/drupal/sites/all/modules/contrib/nodejs/nodejs.module
+++ b/drupal/sites/all/modules/contrib/nodejs/nodejs.module
@@ -38,6 +38,7 @@ function nodejs_send_content_channel_token($channel, $notify_on_disconnect = FAL
     'token' => nodejs_generate_content_token(),
     'channel' => $channel,
     'notifyOnDisconnect' => $notify_on_disconnect,
+    'hostName' => $_SERVER['HTTP_HOST'],
   );
 
   // Http request went ok, process Node.js server response.
@@ -46,7 +47,7 @@ function nodejs_send_content_channel_token($channel, $notify_on_disconnect = FAL
       // We always set this in drupal.settings, even though Ajax requests will not
       // see it. It's a bit ugly, but it means that setting the tokens for full
       // page requests will just work.
-      drupal_add_js(array('nodejs' => array('contentTokens' => array($channel => $message->token))), array('type' => 'setting'));
+      drupal_add_js(array('nodejs' => array('hostName' => $message->hostName, 'contentTokens' => array($channel => $message->token))), array('type' => 'setting'));
 
       $node_response->token = $message->token;
       return $node_response;
@@ -784,7 +785,7 @@ class Nodejs {
   public static function initConfig() {
     if (!isset(self::$config)) {
       self::$config = nodejs_get_config();
-      self::$headers = array('NodejsServiceKey' => self::$config['serviceKey']);
+      self::$headers = array('NodejsServiceKey' => self::$config['serviceKey'], 'hostName' => $_SERVER['HTTP_HOST']);
       self::$baseUrl = nodejs_get_url(self::$config);
     }
   }
@@ -807,6 +808,7 @@ class Nodejs {
     self::initConfig();
     drupal_alter('nodejs_message', $message);
     $message->clientSocketId = nodejs_get_client_socket_id();
+    $message->hostName = $_SERVER['HTTP_HOST'];
     $options = array(
       'method' => 'POST',
       'data' => drupal_json_encode($message),
@@ -830,6 +832,7 @@ class Nodejs {
   public static function sendContentTokenMessage($message) {
     self::initConfig();
     $message->clientSocketId = nodejs_get_client_socket_id();
+    $message->hostName = $_SERVER['HTTP_HOST'];
     drupal_alter('nodejs_content_channel_message', $message);
     $options = array(
       'method' => 'POST',
@@ -842,6 +845,7 @@ class Nodejs {
 
   public static function sendContentToken($message) {
     self::initConfig();
+    $message->hostName = $_SERVER['HTTP_HOST'];
     $options = array(
       'method' => 'POST',
       'data' => drupal_json_encode($message),
@@ -852,6 +856,7 @@ class Nodejs {
 
   public static function getContentTokenUsers($message) {
     self::initConfig();
+    $message->hostName = $_SERVER['HTTP_HOST'];
     $options = array(
       'method' => 'POST',
       'data' => drupal_json_encode($message),
diff --git a/drupal/sites/all/modules/contrib/nodejs/server.js b/drupal/sites/all/modules/contrib/nodejs/server.js
index 472b473..2660910 100644
--- a/drupal/sites/all/modules/contrib/nodejs/server.js
+++ b/drupal/sites/all/modules/contrib/nodejs/server.js
@@ -146,9 +146,9 @@ var clientIsInChannel = function (socket, channel) {
 /**
  * Returns the backend url.
  */
-var getBackendUrl = function () {
-  return settings.backend.scheme + '://' + settings.backend.host + ':' +
-         settings.backend.port + settings.backend.basePath + settings.backend.messagePath;
+var getBackendUrl = function (hostName) {
+  return settings.backend[hostName].scheme + '://' + settings.backend[hostName].host + ':' +
+         settings.backend[hostName].port + settings.backend[hostName].basePath + settings.backend[hostName].messagePath;
 }
 
 var getAuthHeader = function() {
@@ -162,13 +162,17 @@ var getAuthHeader = function() {
  * Send a message to the backend.
  */
 var sendMessageToBackend = function (message, callback) {
+  if (false && typeof message.hostName == 'undefined') {
+    console.log('Invalid host name.')
+    return;
+  }
   var requestBody = querystring.stringify({
     messageJson: JSON.stringify(message),
     serviceKey: settings.serviceKey
   });
 
   var options = {
-    uri: getBackendUrl(),
+    uri: getBackendUrl(message.hostName),
     body: requestBody,
     headers: {
       'Content-Length': Buffer.byteLength(requestBody),
@@ -203,6 +207,8 @@ var authenticateClient = function (client, message) {
     setupClientConnection(client.id, authenticatedClients[message.authToken], message.contentTokens);
   }
   else {
+    // get host name
+    message.hostName = getHostName(client.handshake.headers.origin);
     message.messageType = 'authenticate';
     message.clientId = client.id;
     sendMessageToBackend(message, authenticateClientCallback);
@@ -514,6 +520,7 @@ var logoutUser = function (request, response) {
     // Destroy any socket connections associated with this authToken.
     for (var clientId in sockets) {
       if (sockets[clientId].authToken == authToken) {
+        sockets[clientId].hostName = request.header('hostName', '');
         cleanupSocket(sockets[clientId]);
       }
     }
@@ -934,8 +941,12 @@ var setUserPresenceList = function (uid, uids) {
  * Cleanup after a socket has disconnected.
  */
 var cleanupSocket = function (socket) {
+  var hostName = socket.hostname;
+  if (typeof hostName == 'undefined') {
+    hostName = getHostName(socket.handshake.headers.origin);
+  }
   if (settings.debug) {
-    console.log("Cleaning up after socket id", socket.id, 'uid', socket.uid);
+    console.log("Cleaning up after socket id", socket.id, 'uid', socket.uid, 'hostName', hostName);
   }
   for (var channel in channels) {
     delete channels[channel].sessionIds[socket.id];
@@ -945,7 +956,7 @@ var cleanupSocket = function (socket) {
     if (presenceTimeoutIds[uid]) {
       clearTimeout(presenceTimeoutIds[uid]);
     }
-    presenceTimeoutIds[uid] = setTimeout(checkOnlineStatus, 2000, uid);
+    presenceTimeoutIds[uid] = setTimeout(checkOnlineStatus, 2000, uid, hostName);
   }
 
   for (var tokenChannel in tokenChannels) {
@@ -1003,22 +1014,22 @@ var checkTokenChannelStatus = function (tokenChannel, socket) {
 /**
  * Check for any open sockets for uid.
  */
-var checkOnlineStatus = function (uid) {
+var checkOnlineStatus = function (uid, hostName) {
   if (getNodejsSessionIdsFromUid(uid).length == 0) {
     if (settings.debug) {
       console.log("Sending offline notification for", uid);
     }
-    setUserOffline(uid);
+    setUserOffline(uid, hostName);
   }
 }
 
 /**
  * Sends offline notification to sockets, the backend and cleans up our list.
  */
-var setUserOffline = function (uid) {
+var setUserOffline = function (uid, host) {
   sendPresenceChangeNotification(uid, 'offline');
   delete onlineUsers[uid];
-  sendMessageToBackend({uid: uid, messageType: 'userOffline'}, function (response) { });
+  sendMessageToBackend({uid: uid, messageType: 'userOffline', hostName: host}, function (response) { });
 }
 
 /**
@@ -1095,6 +1106,17 @@ var setupClientConnection = function (sessionId, authData, contentTokens) {
   }
 };
 
+var getHostName = function (url) {
+  var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
+  if (match != null && match.length > 2 &&
+      typeof match[2] === 'string' && match[2].length > 0) {
+    return match[2];
+  }
+  else {
+    return null;
+  }
+}
+
 var app = express();
 app.all(settings.baseAuthPath + '*', checkServiceKeyCallback);
 app.post(settings.baseAuthPath + settings.publishUrl, publishMessage);
